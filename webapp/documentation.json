{
    "pipes": [
        {
            "name": "GroupPipe",
            "id": "pipe-GroupPipe-31e72202e54898236c9419194b79b092",
            "file": "src/app/shared/group.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "T[]"
                        },
                        {
                            "name": "cutoff",
                            "type": "number",
                            "defaultValue": "2"
                        }
                    ],
                    "optional": false,
                    "returnType": "[][]",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cutoff",
                            "type": "number",
                            "defaultValue": "2",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "group",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'group'\n})\nexport class GroupPipe<T> implements PipeTransform {\n\n  transform(value: T[], cutoff: number = 2): T[][] {\n    return value && value.reduce((acc, cur, i) => {\n      acc[i % cutoff].push(cur);\n      return acc;\n    }, Array.from({ length: cutoff }).map(() => new Array<T>()));\n  }\n\n}\n"
        },
        {
            "name": "LimitPipe",
            "id": "pipe-LimitPipe-d59fc1af74a6525734f0dd7efefecc37",
            "file": "src/app/shared/limit.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string | undefined | null"
                        },
                        {
                            "name": "size",
                            "type": "number",
                            "defaultValue": "60"
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined | null",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string | undefined | null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "size",
                            "type": "number",
                            "defaultValue": "60",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "limit",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'limit'\n})\nexport class LimitPipe implements PipeTransform {\n\n  transform(value: string | undefined | null, size: number = 60): string | undefined | null {\n    return value && value.length > size ? value.slice(0, size).concat('...') : value;\n  }\n}\n"
        }
    ],
    "interfaces": [],
    "injectables": [
        {
            "name": "EmailService",
            "id": "injectable-EmailService-948d5fcfed9b3041c71882ddb14207d3",
            "file": "src/app/shared/email.service.ts",
            "properties": [
                {
                    "name": "model",
                    "defaultValue": "{\n    address: \"\",\n    message: \"\",\n    title: \"\",\n    template: \"\"\n  }",
                    "type": "Email",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methods": [
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\nimport { Email } from '../home/models';\nimport { paths } from './backend.api';\nimport { PopupService } from './popup.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmailService {\n  readonly model: Email = {\n    address: \"\",\n    message: \"\",\n    title: \"\",\n    template: \"\"\n  };\n  submitted = false;\n\n  constructor(private http: HttpClient, private popups: PopupService) { }\n\n  submit() {\n    if(!this.submitted) {\n      this.submitted = true;\n\n      this.http.post<paths[\"/Emails\"][\"post\"][\"responses\"][200][\"text/plain\"]>(\n        `${environment.backend}/Emails`,\n        {\n          ...this.model,\n          isSuccessful: false,\n          user: { ipAddress: '' }\n        }\n      ).subscribe(\n        () => {\n          this.popups.createNotice('Email sent successfuly!');\n          this.reset();\n        },\n        () => { this.popups.createNotice('Error sending the email, please try again later...') },\n        () => this.submitted = false\n      )\n    }\n  }\n\n  reset() {\n    this.model.address = '';\n    this.model.message = '';\n    this.model.title = '';\n    this.model.template = '';\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "popups",
                        "type": "PopupService"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "popups",
                        "type": "PopupService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FamousQuoteService",
            "id": "injectable-FamousQuoteService-73f437011fae2f0c68f2a13f9f387ef5",
            "file": "src/app/home/famous-quote.service.ts",
            "properties": [
                {
                    "name": "random$",
                    "defaultValue": "this.http.get(`${environment.backend}/Quotes`)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [
                {
                    "name": "random",
                    "args": [],
                    "optional": false,
                    "returnType": "{ author: string; message: string; }",
                    "typeParameters": [],
                    "line": 13,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FamousQuoteService {\n  readonly random$ = this.http.get(`${environment.backend}/Quotes`);\n\n  constructor(private http: HttpClient) { }\n\n  public random() {\n    return {\n      author: 'Charles Schwab',\n      message: 'Be hearty in your approbation and lavish in your praise.'\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MediaService",
            "id": "injectable-MediaService-a9d119cb4abbd1bca3c8a937806118a2",
            "file": "src/app/home/media.service.ts",
            "properties": [
                {
                    "name": "current$",
                    "defaultValue": "new BehaviorSubject<Media | null>(null)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "getList$",
                    "defaultValue": "new BehaviorSubject<Filter>(Filter.ALL)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "list$",
                    "defaultValue": "this.getList$.pipe(\n    switchMap(res =>\n      this.http.get<paths[\"/Media\"][\"get\"][\"responses\"][200][\"text/plain\"]>(\n        `${environment.backend}/Media${res}`\n      )\n    ),\n    map(res =>\n      res.map(el => this.createMediaModel(el))\n    )\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createMediaModel",
                    "args": [
                        {
                            "name": "media",
                            "type": "BaseMedia"
                        }
                    ],
                    "optional": false,
                    "returnType": "Media",
                    "typeParameters": [],
                    "line": 30,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "media",
                            "type": "BaseMedia",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { BehaviorSubject } from 'rxjs';\nimport { map, shareReplay, switchMap } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { StaticFileService } from '../core/static-file.service';\nimport { paths } from '../shared/backend.api';\nimport { BaseMedia, Media } from './models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MediaService {\n  readonly getList$ = new BehaviorSubject<Filter>(Filter.ALL);\n  readonly list$ = this.getList$.pipe(\n    switchMap(res =>\n      this.http.get<paths[\"/Media\"][\"get\"][\"responses\"][200][\"text/plain\"]>(\n        `${environment.backend}/Media${res}`\n      )\n    ),\n    map(res =>\n      res.map(el => this.createMediaModel(el))\n    )\n  );\n  readonly current$ = new BehaviorSubject<Media | null>(null);\n\n  constructor(private http: HttpClient, private sanitizer: DomSanitizer, private staticFiles: StaticFileService) { }\n\n  private createMediaModel(media: BaseMedia): Media {\n    return {\n      ...media,\n      url$: this.staticFiles.get(media.url).pipe(\n        map(url => this.sanitizer.bypassSecurityTrustUrl(url)),\n        shareReplay()\n      )\n    };\n  }\n}\n\nexport enum Filter {\n  ALL = '',\n  PHOTOS = '/Image',\n  VIDEOS = '/Video'\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer"
                    },
                    {
                        "name": "staticFiles",
                        "type": "StaticFileService"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "staticFiles",
                        "type": "StaticFileService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MockMusicService",
            "id": "injectable-MockMusicService-365e9d5a92d6f2cf64ad313618290493",
            "file": "src/app/home/music-gallery/music-gallery.stories.ts",
            "properties": [
                {
                    "name": "getSongs$",
                    "defaultValue": "new Subject<Album>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "songs$",
                    "defaultValue": "this.getSongs$.pipe(\r\n        switchMap(res =>\r\n            this.http.get<any>(\r\n                `${environment.backend}/Albums/${res.id}`\r\n            )\r\n        ),\r\n        map(res => res.songs.map((el: any) => super.createSong(el, res))),\r\n        withLatestFrom(this.getSongs$),\r\n        map(res => res[0].map((el: any, i: number) => ({ ...el, title: res[1].songs[i].title, id: res[1].songs[i].id }))),\r\n        share()\r\n    )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "albums$",
                    "defaultValue": "this.getAlbums$.pipe(\r\n    switchMap(res => this.http.get<paths[\"/Albums\"][\"get\"][\"responses\"][200][\"text/plain\"]>(\r\n      `${environment.backend}/Albums`,\r\n      { params: { ...res } }\r\n    )),\r\n    map(res  => res.map(el => this.createAlbum(el))),\r\n    share()\r\n  )",
                    "type": "Observable<Album[]>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        132
                    ],
                    "inheritance": {
                        "file": "MusicService"
                    }
                },
                {
                    "name": "getAlbums$",
                    "defaultValue": "new Subject<Pagination>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        132
                    ],
                    "inheritance": {
                        "file": "MusicService"
                    }
                },
                {
                    "name": "getSongs$",
                    "defaultValue": "new Subject<Album>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        132
                    ],
                    "inheritance": {
                        "file": "MusicService"
                    }
                },
                {
                    "name": "showcase$",
                    "defaultValue": "this.http.get<paths[\"/Songs/Top\"][\"get\"][\"responses\"][200][\"text/plain\"]>(\r\n    `${environment.backend}/Songs/Top`\r\n  ).pipe(\r\n    map(res => res.map(el => this.topSongToSong(el)))\r\n  )",
                    "type": "Observable<Song[]>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        132
                    ],
                    "inheritance": {
                        "file": "MusicService"
                    }
                },
                {
                    "name": "songs$",
                    "defaultValue": "this.getSongs$.pipe(\r\n    switchMap(res =>\r\n      this.http.get<paths[\"/Albums/{id}\"][\"get\"][\"responses\"][200][\"text/plain\"]>(\r\n        `${environment.backend}/Albums/${res.id}`\r\n      )\r\n    ),\r\n    map(res => res.songs.map(el => this.createSong(el, res))),\r\n    share()\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        132
                    ],
                    "inheritance": {
                        "file": "MusicService"
                    }
                }
            ],
            "methods": [
                {
                    "name": "createAlbum",
                    "args": [
                        {
                            "name": "album",
                            "type": "BaseAlbum"
                        }
                    ],
                    "optional": false,
                    "returnType": "Album",
                    "typeParameters": [],
                    "line": 52,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "album",
                            "type": "BaseAlbum",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "MusicService"
                    }
                },
                {
                    "name": "createSong",
                    "args": [
                        {
                            "name": "song",
                            "type": "BaseSong"
                        },
                        {
                            "name": "album",
                            "type": "BaseAlbum"
                        }
                    ],
                    "optional": false,
                    "returnType": "Song",
                    "typeParameters": [],
                    "line": 61,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "song",
                            "type": "BaseSong",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "album",
                            "type": "BaseAlbum",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "MusicService"
                    }
                },
                {
                    "name": "get$",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "MusicService"
                    }
                },
                {
                    "name": "topSongToSong",
                    "args": [
                        {
                            "name": "topSong",
                            "type": "TopSong"
                        }
                    ],
                    "optional": false,
                    "returnType": "Song",
                    "typeParameters": [],
                    "line": 76,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "topSong",
                            "type": "TopSong",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "MusicService"
                    }
                }
            ],
            "description": "",
            "sourceCode": "import { moduleMetadata, Story } from '@storybook/angular';\r\nimport { MusicGalleryComponent } from './music-gallery.component';\r\nimport { SwiperModule } from 'swiper/angular';\r\nimport { QuickPlayerComponent } from '../quick-player/quick-player.component';\r\nimport { of, Subject } from 'rxjs';\r\nimport { Album } from '../models';\r\nimport { MusicGallerySongsComponent } from '../music-gallery-songs/music-gallery-songs.component';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { AlbumCoverComponent } from '../album-cover/album-cover.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { RouterTestingModule } from '@angular/router/testing';\r\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\r\nimport { MockModelProvider } from 'src/app/core/mock-model.interceptor';\r\nimport { StaticFileService } from 'src/app/core/static-file.service';\r\nimport { MusicService } from '../music.service';\r\nimport { map, share, switchMap, withLatestFrom } from 'rxjs/operators';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\n\r\nexport default {\r\n    title: 'Home/Music Gallery',\r\n    decorators: [\r\n        moduleMetadata({\r\n            declarations: [MusicGalleryComponent, MusicGallerySongsComponent, AlbumCoverComponent, QuickPlayerComponent],\r\n            imports: [BrowserAnimationsModule, HttpClientModule, RouterTestingModule, SwiperModule, FontAwesomeModule],\r\n            providers: [MockModelProvider]\r\n        }),\r\n    ]\r\n};\r\n\r\nconst Template: Story<Album & { songTitle: string, songAudio: string, count: number }> = args => {\r\n    class MockStaticFileService implements Partial<StaticFileService> {\r\n        get(fileName: string) {\r\n            return of('assets/images/banner-1.jpg');\r\n        }\r\n    }\r\n\r\n    return {\r\n        moduleMetadata: {\r\n            providers: [\r\n                { provide: MusicService, useClass: MockMusicService },\r\n                { provide: StaticFileService, useClass: MockStaticFileService }\r\n            ]\r\n        },\r\n        component: MusicGalleryComponent\r\n    }\r\n};\r\n\r\nexport const Default = Template.bind({});\r\nDefault.args = {\r\n    title: 'album title',\r\n    genre: 'genre',\r\n    coverImage: 'assets/images/banner-1.jpg',\r\n    songTitle: 'album song',\r\n    songAudio: 'assets/mp3.mp3',\r\n    count: 10\r\n};\r\n\r\n    // This is necessary to keep data consistent for testing.\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nclass MockMusicService extends MusicService {\r\n    readonly getSongs$ = new Subject<Album>();\r\n    readonly songs$ = this.getSongs$.pipe(\r\n        switchMap(res =>\r\n            this.http.get<any>(\r\n                `${environment.backend}/Albums/${res.id}`\r\n            )\r\n        ),\r\n        map(res => res.songs.map((el: any) => super.createSong(el, res))),\r\n        withLatestFrom(this.getSongs$),\r\n        map(res => res[0].map((el: any, i: number) => ({ ...el, title: res[1].songs[i].title, id: res[1].songs[i].id }))),\r\n        share()\r\n    );\r\n\r\n    constructor(http: HttpClient, sanitizer: DomSanitizer, files: StaticFileService) {\r\n        super(http, sanitizer, files);\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer"
                    },
                    {
                        "name": "files",
                        "type": "StaticFileService"
                    }
                ],
                "line": 76,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "files",
                        "type": "StaticFileService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "MusicService",
            "type": "injectable"
        },
        {
            "name": "MusicService",
            "id": "injectable-MusicService-0773765ae7b18d09971e93a36cd64da3",
            "file": "src/app/home/music.service.ts",
            "properties": [
                {
                    "name": "albums$",
                    "defaultValue": "this.getAlbums$.pipe(\r\n    switchMap(res => this.http.get<paths[\"/Albums\"][\"get\"][\"responses\"][200][\"text/plain\"]>(\r\n      `${environment.backend}/Albums`,\r\n      { params: { ...res } }\r\n    )),\r\n    map(res  => res.map(el => this.createAlbum(el))),\r\n    share()\r\n  )",
                    "type": "Observable<Album[]>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "getAlbums$",
                    "defaultValue": "new Subject<Pagination>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "getSongs$",
                    "defaultValue": "new Subject<Album>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "showcase$",
                    "defaultValue": "this.http.get<paths[\"/Songs/Top\"][\"get\"][\"responses\"][200][\"text/plain\"]>(\r\n    `${environment.backend}/Songs/Top`\r\n  ).pipe(\r\n    map(res => res.map(el => this.topSongToSong(el)))\r\n  )",
                    "type": "Observable<Song[]>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "songs$",
                    "defaultValue": "this.getSongs$.pipe(\r\n    switchMap(res =>\r\n      this.http.get<paths[\"/Albums/{id}\"][\"get\"][\"responses\"][200][\"text/plain\"]>(\r\n        `${environment.backend}/Albums/${res.id}`\r\n      )\r\n    ),\r\n    map(res => res.songs.map(el => this.createSong(el, res))),\r\n    share()\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createAlbum",
                    "args": [
                        {
                            "name": "album",
                            "type": "BaseAlbum"
                        }
                    ],
                    "optional": false,
                    "returnType": "Album",
                    "typeParameters": [],
                    "line": 52,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "album",
                            "type": "BaseAlbum",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSong",
                    "args": [
                        {
                            "name": "song",
                            "type": "BaseSong"
                        },
                        {
                            "name": "album",
                            "type": "BaseAlbum"
                        }
                    ],
                    "optional": false,
                    "returnType": "Song",
                    "typeParameters": [],
                    "line": 61,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "song",
                            "type": "BaseSong",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "album",
                            "type": "BaseAlbum",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get$",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "topSongToSong",
                    "args": [
                        {
                            "name": "topSong",
                            "type": "TopSong"
                        }
                    ],
                    "optional": false,
                    "returnType": "Song",
                    "typeParameters": [],
                    "line": 76,
                    "modifierKind": [
                        113
                    ],
                    "jsdoctags": [
                        {
                            "name": "topSong",
                            "type": "TopSong",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { Observable, of, ReplaySubject, Subject } from 'rxjs';\r\nimport { map, share, switchMap } from 'rxjs/operators';\r\nimport { environment } from 'src/environments/environment';\r\nimport { StaticFileService } from '../core/static-file.service';\r\nimport { paths } from '../shared/backend.api';\r\nimport { Album, BaseAlbum, BaseSong, Pagination, Song, TopSong } from './models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MusicService {\r\n  readonly showcase$: Observable<Song[]> = this.http.get<paths[\"/Songs/Top\"][\"get\"][\"responses\"][200][\"text/plain\"]>(\r\n    `${environment.backend}/Songs/Top`\r\n  ).pipe(\r\n    map(res => res.map(el => this.topSongToSong(el)))\r\n  );\r\n  readonly getAlbums$ = new Subject<Pagination>();\r\n  readonly albums$: Observable<Album[]> = this.getAlbums$.pipe(\r\n    switchMap(res => this.http.get<paths[\"/Albums\"][\"get\"][\"responses\"][200][\"text/plain\"]>(\r\n      `${environment.backend}/Albums`,\r\n      { params: { ...res } }\r\n    )),\r\n    map(res  => res.map(el => this.createAlbum(el))),\r\n    share()\r\n  );\r\n\r\n  readonly getSongs$ = new Subject<Album>();\r\n  readonly songs$ = this.getSongs$.pipe(\r\n    switchMap(res =>\r\n      this.http.get<paths[\"/Albums/{id}\"][\"get\"][\"responses\"][200][\"text/plain\"]>(\r\n        `${environment.backend}/Albums/${res.id}`\r\n      )\r\n    ),\r\n    map(res => res.songs.map(el => this.createSong(el, res))),\r\n    share()\r\n  );\r\n\r\n  constructor(protected http: HttpClient, protected sanitizer: DomSanitizer, protected files: StaticFileService) {\r\n  }\r\n\r\n  get$(id: string) {\r\n    return this.http.get<paths[\"/Songs/{id}\"][\"get\"][\"responses\"][200][\"text/plain\"]>(\r\n      `${environment.backend}/Songs/${id}`\r\n    ).pipe(\r\n      map(res => this.createSong(res, res.album)),\r\n    );\r\n  }\r\n\r\n  protected createAlbum(album: BaseAlbum): Album {\r\n    return {\r\n      ...album,\r\n      coverImage$: album.coverImage \r\n        ? this.files.get(album.coverImage) \r\n        : of('assets/images/banner-1.jpg')\r\n    };\r\n  }\r\n\r\n  protected createSong(song: BaseSong, album: BaseAlbum): Song {\r\n    return {\r\n      ...song,\r\n      genre: song.genre ? song.genre : album.genre,\r\n      coverImage$: album.coverImage \r\n        ? this.files.get(album.coverImage) \r\n        : of('assets/images/banner-1.jpg'),\r\n      audio$: song.audio \r\n        ? this.files.get(song.audio).pipe(\r\n            map(res => this.sanitizer.bypassSecurityTrustUrl(res))\r\n          ) \r\n        : undefined\r\n    }\r\n  }\r\n\r\n  protected topSongToSong(topSong: TopSong): Song {\r\n    return {\r\n      ...topSong.song,\r\n      genre: topSong.song.genre ? topSong.song.genre : topSong.song.album.genre,\r\n      coverImage$: topSong.song.album.coverImage \r\n        ? this.files.get(topSong.song.album.coverImage) \r\n        : of()\r\n    };\r\n  }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer"
                    },
                    {
                        "name": "files",
                        "type": "StaticFileService"
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "files",
                        "type": "StaticFileService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "NavigationService",
            "id": "injectable-NavigationService-8faf9a47a310880479fcb07a2efb0644",
            "file": "src/app/shared/navigation.service.ts",
            "properties": [
                {
                    "name": "footer",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationService {\n  footer: boolean = true;\n\n  constructor() { }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 7
            },
            "type": "injectable"
        },
        {
            "name": "PopupService",
            "id": "injectable-PopupService-355d4d453514d38b7183707164eb3d37",
            "file": "src/app/shared/popup.service.ts",
            "properties": [
                {
                    "name": "noticeCompRef",
                    "type": "ComponentRef<NoticeComponent>",
                    "optional": true,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createNotice",
                    "args": [
                        {
                            "name": "message",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Overlay, OverlayConfig } from '@angular/cdk/overlay';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ComponentRef, Injectable } from '@angular/core';\nimport { NoticeComponent } from './notice/notice.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PopupService {\n  private noticeCompRef?: ComponentRef<NoticeComponent>;\n\n  constructor(private overlay: Overlay) { }\n\n  createNotice(message: string) {\n    if(!this.noticeCompRef) {\n      const configs = new OverlayConfig({\n        positionStrategy: this.overlay.position().global().bottom().right(),\n        panelClass: ['modal', 'is-active']\n      });\n\n      var overlayRef = this.overlay.create(configs);\n      this.noticeCompRef = overlayRef.attach(new ComponentPortal(NoticeComponent));\n      this.noticeCompRef.instance.closePanel.subscribe(() => {\n        overlayRef.dispose();\n        this.noticeCompRef = undefined;\n      });\n    } else {\n      this.noticeCompRef.instance.refreshTimer$.next();\n    }\n\n    this.noticeCompRef.instance.messages.push(message);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "overlay",
                        "type": "Overlay"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProfileService",
            "id": "injectable-ProfileService-83180b49fa1d97ae8203efd061970094",
            "file": "src/app/home/profile.service.ts",
            "properties": [
                {
                    "name": "banner$",
                    "defaultValue": "this.staticFiles.get('home-banner.jpg')",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "biography$",
                    "defaultValue": "this.http.get<Article[]>(`${environment.backend}/Articles`)\r\n    .pipe(\r\n      map(res => res[0])\r\n    )",
                    "type": "Observable<Article>",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { environment } from 'src/environments/environment';\r\nimport { StaticFileService } from '../core/static-file.service';\r\nimport { Article } from './models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProfileService {\r\n  banner$: Observable<string> = this.staticFiles.get('home-banner.jpg');\r\n  biography$: Observable<Article> = this.http.get<Article[]>(`${environment.backend}/Articles`)\r\n    .pipe(\r\n      map(res => res[0])\r\n    );\r\n\r\n  constructor(private http: HttpClient, private staticFiles: StaticFileService) { }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "staticFiles",
                        "type": "StaticFileService"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "staticFiles",
                        "type": "StaticFileService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SocialService",
            "id": "injectable-SocialService-74752bd12aa7712667e80ba80ac23981",
            "file": "src/app/home/social.service.ts",
            "properties": [
                {
                    "name": "allPosts$",
                    "defaultValue": "this.getPosts$.pipe(\r\n    switchMap(res =>\r\n      this.http.get<paths[\"/Posts\"][\"get\"][\"responses\"][200][\"text/plain\"]>(\r\n        `${environment.backend}/Posts${res}`\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        112,
                        132
                    ]
                },
                {
                    "name": "archive$",
                    "defaultValue": "this.http.get<paths[\"/Posts/History\"][\"get\"][\"responses\"][200][\"text/plain\"]>(\r\n    `${environment.backend}/Posts/History`,\r\n  ).pipe(\r\n    map(res => res.sort((a, b) => new Date(a.year, a.month) < new Date(b.year, b.month) ? 1 : -1)),\r\n    map(res =>\r\n      res.reduce((acc, cur) => {\r\n        const prev = acc[acc.length - 1];\r\n        if(prev && prev.year == cur.year) {\r\n          prev.months.push(cur.month)\r\n        } else {\r\n          acc.push({ year: cur.year, months: [cur.month] })\r\n        }\r\n        return acc;\r\n      }, new Array<{ year: number, months: number[] }>())\r\n    )\r\n  )",
                    "type": "Observable<Array<literal type>>",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "archivedPosts$",
                    "defaultValue": "this.getArchivedPosts$.pipe(\r\n    switchMap(res =>\r\n      this.http.get<paths[\"/Posts/History/{year}/{month}\"][\"get\"][\"responses\"][200][\"text/plain\"]>(\r\n        `${environment.backend}/Posts/History/${res.year}/${res.month}`\r\n      )\r\n    )\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "getArchivedPosts$",
                    "defaultValue": "new Subject<{ year: string | number, month: string | number }>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "getPosts$",
                    "defaultValue": "new BehaviorSubject<Filter>(Filter.ALL)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "latest$",
                    "defaultValue": "this.http.get<paths[\"/Posts/Event\"][\"get\"][\"responses\"][200][\"text/plain\"]>(\r\n    `${environment.backend}/Posts/Event`,\r\n    { params: { size: \"3\" } }\r\n  ).pipe(\r\n    map(res => res.map(el => this.createQuickEvent(el)))\r\n  )",
                    "type": "Observable<QuickEvent[]>",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "posts$",
                    "defaultValue": "merge(\r\n    this.allPosts$,\r\n    this.archivedPosts$\r\n  ).pipe(\r\n    map(res => res.map(el => this.createPostModel(el)))\r\n  )",
                    "type": "Observable<Post[]>",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [
                {
                    "name": "createMediaModel",
                    "args": [
                        {
                            "name": "media",
                            "type": "BaseMedia"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 84,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "media",
                            "type": "BaseMedia",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createPostModel",
                    "args": [
                        {
                            "name": "post",
                            "type": "BasePost"
                        }
                    ],
                    "optional": false,
                    "returnType": "Post",
                    "typeParameters": [],
                    "line": 66,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "post",
                            "type": "BasePost",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createQuickEvent",
                    "args": [
                        {
                            "name": "post",
                            "type": "BasePost"
                        }
                    ],
                    "optional": false,
                    "returnType": "QuickEvent",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "post",
                            "type": "BasePost",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createThumbnail",
                    "args": [
                        {
                            "name": "post",
                            "type": "BasePost"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 93,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "post",
                            "type": "BasePost",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { BehaviorSubject, merge, Observable, of, Subject } from 'rxjs';\r\nimport { map, switchMap, tap } from 'rxjs/operators';\r\nimport { environment } from 'src/environments/environment';\r\nimport { StaticFileService } from '../core/static-file.service';\r\nimport { paths } from '../shared/backend.api';\r\nimport { BaseMedia, BasePost, QuickEvent, Post } from './models';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SocialService {\r\n  readonly getArchivedPosts$ = new Subject<{ year: string | number, month: string | number }>();\r\n  private archivedPosts$ = this.getArchivedPosts$.pipe(\r\n    switchMap(res =>\r\n      this.http.get<paths[\"/Posts/History/{year}/{month}\"][\"get\"][\"responses\"][200][\"text/plain\"]>(\r\n        `${environment.backend}/Posts/History/${res.year}/${res.month}`\r\n      )\r\n    )\r\n  );\r\n\r\n  readonly getPosts$ = new BehaviorSubject<Filter>(Filter.ALL);\r\n  private readonly allPosts$ = this.getPosts$.pipe(\r\n    switchMap(res =>\r\n      this.http.get<paths[\"/Posts\"][\"get\"][\"responses\"][200][\"text/plain\"]>(\r\n        `${environment.backend}/Posts${res}`\r\n      )\r\n    )\r\n  );\r\n\r\n  readonly posts$: Observable<Post[]> = merge(\r\n    this.allPosts$,\r\n    this.archivedPosts$\r\n  ).pipe(\r\n    map(res => res.map(el => this.createPostModel(el)))\r\n  );\r\n\r\n  readonly latest$: Observable<QuickEvent[]> = this.http.get<paths[\"/Posts/Event\"][\"get\"][\"responses\"][200][\"text/plain\"]>(\r\n    `${environment.backend}/Posts/Event`,\r\n    { params: { size: \"3\" } }\r\n  ).pipe(\r\n    map(res => res.map(el => this.createQuickEvent(el)))\r\n  );\r\n\r\n  readonly archive$: Observable<Array<{ year: number, months: number[] }>> = this.http.get<paths[\"/Posts/History\"][\"get\"][\"responses\"][200][\"text/plain\"]>(\r\n    `${environment.backend}/Posts/History`,\r\n  ).pipe(\r\n    map(res => res.sort((a, b) => new Date(a.year, a.month) < new Date(b.year, b.month) ? 1 : -1)),\r\n    map(res =>\r\n      res.reduce((acc, cur) => {\r\n        const prev = acc[acc.length - 1];\r\n        if(prev && prev.year == cur.year) {\r\n          prev.months.push(cur.month)\r\n        } else {\r\n          acc.push({ year: cur.year, months: [cur.month] })\r\n        }\r\n        return acc;\r\n      }, new Array<{ year: number, months: number[] }>())\r\n    )\r\n  );\r\n\r\n  constructor(private http: HttpClient, private files: StaticFileService, private sanitizer: DomSanitizer) { }\r\n\r\n  private createPostModel(post: BasePost): Post {\r\n    return {\r\n      ...post,\r\n      thumbnail$: this.createThumbnail(post),\r\n      gallery: post.gallery ? post.gallery.map(el => this.createMediaModel(el)) : undefined\r\n    }\r\n  }\r\n\r\n  private createQuickEvent(post: BasePost): QuickEvent {\r\n    return {\r\n      id: post.id,\r\n      title: post.title,\r\n      link: post.link,\r\n      created: post.created,\r\n      thumbnail$: this.createThumbnail(post)\r\n    };\r\n  }\r\n\r\n  private createMediaModel(media: BaseMedia) {\r\n    return {\r\n      ...media,\r\n      url$: this.files.get(media.url).pipe(\r\n        map(res => this.sanitizer.bypassSecurityTrustUrl(res))\r\n      )\r\n    };\r\n  }\r\n\r\n  private createThumbnail(post: BasePost) {\r\n    if(post.gallery && post.gallery[0]) {\r\n      return this.files.get(post.gallery[0].url).pipe(\r\n        map(res => this.sanitizer.bypassSecurityTrustUrl(res))\r\n      );\r\n    } else {\r\n      return of('assets/images/banner-1.jpg');\r\n    }\r\n  }\r\n}\r\n\r\nexport enum Filter {\r\n  ALL = '',\r\n  EVENTS = '/Event',\r\n  POSTS = '/Update'\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "files",
                        "type": "StaticFileService"
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer"
                    }
                ],
                "line": 62,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "files",
                        "type": "StaticFileService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sanitizer",
                        "type": "DomSanitizer",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StaticFileService",
            "id": "injectable-StaticFileService-75784b96ebab1ad41a8ef5ec03a73402",
            "file": "src/app/core/static-file.service.ts",
            "properties": [
                {
                    "name": "apiKey",
                    "defaultValue": "'a41c3cc0353620d6ce383521be6a207b'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "fileName",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 14,
                    "jsdoctags": [
                        {
                            "name": "fileName",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StaticFileService {\n  apiKey = 'a41c3cc0353620d6ce383521be6a207b';\n\n  constructor(private http: HttpClient) { }\n\n  get(fileName: string) {\n    const params = { containerName: 'patriciopersonal', fileName };\n    return this.http.get(\n      `${environment.media}/${fileName}`,\n      { params, responseType: 'blob', headers: { 'kfntech-key': this.apiKey } }\n    ).pipe(\n      map(res => window.URL.createObjectURL(res))\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-e3ea1f4631d62652a5623d3ab757b2fc",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\r\n\r\nexport class AppPage {\r\n  async navigateTo(): Promise<unknown> {\r\n    return browser.get(browser.baseUrl);\r\n  }\r\n\r\n  async getTitleText(): Promise<string> {\r\n    return element(by.css('app-root .content span')).getText();\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AlbumCoverComponent",
            "id": "component-AlbumCoverComponent-637f0bc423df4b877fb100ea3a5aaa26",
            "file": "src/app/home/album-cover/album-cover.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-album-cover",
            "styleUrls": [
                "./album-cover.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./album-cover.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "coverImage",
                    "line": 10,
                    "type": "SafeUrl | string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { SafeUrl } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-album-cover',\n  templateUrl: './album-cover.component.html',\n  styleUrls: ['./album-cover.component.scss']\n})\nexport class AlbumCoverComponent implements OnInit {\n  @Input() coverImage?: SafeUrl | string;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'src/assets/scss/theme.scss' as theme;\r\n\r\n:host {\r\n    position: relative;\r\n    padding: map-get(theme.$spacing, std);\r\n    display: block;\r\n    overflow: hidden;\r\n\r\n    border: 1px map-get(theme.$palettes, black) solid;\r\n    font-size: calc(32rem / #{map-get(theme.$text, std)});\r\n    text-transform: capitalize;\r\n    color: white;\r\n\r\n    &:hover > .blur, &.__hover > .blur {\r\n        filter: blur(4px);\r\n        margin: -5px;\r\n    }\r\n\r\n    &:hover > .background, &.__hover > .background {\r\n        width: calc(100% + 10px);\r\n    }\r\n}\r\n\r\n.blur {\r\n    transition: none;\r\n}",
                    "styleUrl": "./album-cover.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-content></ng-content>\n<article class=\"background blur\" [style.background-image]=\"'url(' + coverImage + ')'\"></article>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-287f89008d59eb9751e9e81fd2afe6d5",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'patricio-personal'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'patricio-personal';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-header></app-header>\r\n<router-outlet></router-outlet>\r\n<app-footer></app-footer>"
        },
        {
            "name": "BiographyComponent",
            "id": "component-BiographyComponent-03e68823bfb463f4c7f5eb94d7ab1998",
            "file": "src/app/home/biography/biography.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-biography",
            "styleUrls": [
                "./biography.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./biography.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "biography",
                    "defaultValue": "metaData.biography",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "portrait",
                    "defaultValue": "metaData.homeBannerUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "show",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport metaData from 'src/meta-data';\n\n@Component({\n  selector: 'app-biography',\n  templateUrl: './biography.component.html',\n  styleUrls: ['./biography.component.scss']\n})\nexport class BiographyComponent implements OnInit {\n  readonly portrait: string = metaData.homeBannerUrl;\n  readonly biography: string = metaData.biography;\n  show: boolean = false;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'src/assets/scss/theme.scss' as theme;\r\n\r\n:host {\r\n    padding: map-get(theme.$spacing, large) map-get(theme.$spacing, page);\r\n    display: block;\r\n\r\n    background-color: map-get(theme.$palettes, black);\r\n}\r\n\r\n.title {\r\n    margin-top: 0;\r\n    color: map-get(theme.$palettes, accent);\r\n}\r\n\r\n.biography {\r\n    position: relative;\r\n    height: 50vh;\r\n    overflow: hidden;\r\n\r\n    color: map-get(theme.$palettes, white); \r\n    line-height: 32px;\r\n    white-space: pre-line;\r\n\r\n    & > p { margin: 0; }\r\n\r\n    &.all {\r\n        height: 100%;\r\n    }\r\n}\r\n\r\n.portrait {\r\n    width: 100%;\r\n}\r\n\r\n.overlay {\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    height: 25vh;\r\n    padding-bottom: 24px;\r\n\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: flex-end;\r\n\r\n    background: linear-gradient(transparent, #{map-get(theme.$palettes, black)});\r\n}\r\n\r\n@media (min-width: map-get(theme.$screens, laptop)) {\r\n    :host {\r\n        padding: map-get(theme.$spacing, large) map-get(theme.$spacing, page-wide);\r\n    }\r\n\r\n    .container {\r\n        display: grid;\r\n        grid-template-columns: 1fr 1fr;\r\n        grid-auto-flow: dense;\r\n        grid-gap: 80px;\r\n        gap: 80px;\r\n    }\r\n\r\n    .portrait {\r\n        grid-column: 2;\r\n        object-fit: cover;\r\n        height: 100%;\r\n    }\r\n\r\n    .biography { height: 100%; }\r\n\r\n    .overlay { display: none; }\r\n}\r\n\r\n",
                    "styleUrl": "./biography.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2 class=\"title\">Biography | 简介</h2>\n\n<section class=\"container\">\n    <img class=\"portrait\" [src]=\"portrait\" />\n\n    <div class=\"biography\" [ngClass]=\"show ? 'all' : ''\">\n        <p>{{ biography }}</p>\n        <div class=\"overlay\" *ngIf=\"!show\">\n            <button class=\"outline\" (click)=\"show = true\">Show All</button>\n        </div>\n    </div>\n</section>"
        },
        {
            "name": "DiscographyComponent",
            "id": "component-DiscographyComponent-880dc0ac5bed081f9ece12ea8166a684",
            "file": "src/app/home/discography/discography.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-discography",
            "styleUrls": [
                "./discography.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./discography.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-discography',\r\n  templateUrl: './discography.component.html',\r\n  styleUrls: ['./discography.component.scss']\r\n})\r\nexport class DiscographyComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./discography.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-music-gallery></app-music-gallery>\r\n<app-email-me></app-email-me>"
        },
        {
            "name": "EmailMeComponent",
            "id": "component-EmailMeComponent-fc86b000531da675d321be852b388afa",
            "file": "src/app/home/email-me/email-me.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-email-me",
            "styleUrls": [
                "./email-me.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./email-me.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "emails",
                    "type": "EmailService",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "template",
                    "defaultValue": "metaData.emailTemplateDesc",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "templateOptions",
                    "defaultValue": "metaData.emailTemplateOptions",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "metaData.emailTitleDesc",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "titleOptions",
                    "defaultValue": "metaData.emailTitleOptions",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { EmailService } from 'src/app/shared/email.service';\nimport metaData from 'src/meta-data';\n\n@Component({\n  selector: 'app-email-me',\n  templateUrl: './email-me.component.html',\n  styleUrls: ['./email-me.component.scss']\n})\nexport class EmailMeComponent implements OnInit {\n  readonly title: string = metaData.emailTitleDesc;\n  readonly template: string = metaData.emailTemplateDesc;\n  readonly titleOptions: string[] = metaData.emailTitleOptions;\n  readonly templateOptions: string[] =metaData.emailTemplateOptions;\n\n  constructor(public emails: EmailService) { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'src/assets/scss/theme.scss' as theme;\r\n\r\n:host {\r\n    padding: map-get(theme.$spacing, large) map-get(theme.$spacing, page);\r\n    display: block;\r\n    \r\n    color: map-get(theme.$palettes, white);\r\n    background-color: map-get(theme.$palettes, primary);\r\n}\r\n\r\n.required::after {\r\n    content: \" *\";\r\n    color: red;\r\n}\r\n\r\n.title {\r\n    margin: 0;\r\n}\r\n\r\n.email {\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    & > * { flex: 1; }\r\n}\r\n\r\n.form-ctrl {\r\n    margin: 24px 0;\r\n    \r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    & > label { \r\n        padding-bottom: 8px;\r\n        font-size: calc(12rem / #{map-get(theme.$text, std)});\r\n    }\r\n}\r\n\r\n.textarea-wrapper {\r\n    height: 100%;\r\n    display: flex;\r\n    background-color: white;\r\n    border: .5px solid black;\r\n    & > textarea {\r\n        width: 100%;\r\n        border: none;\r\n    }\r\n}\r\n\r\n@media (min-width: map-get(theme.$screens, laptop)) {\r\n    :host {\r\n        padding: map-get(theme.$spacing, large) map-get(theme.$spacing, page-wide);\r\n    }\r\n\r\n    .email {\r\n        flex-direction: row;\r\n\r\n        & > :first-child {\r\n            margin-right: 80px;\r\n            margin-bottom: 0;\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./email-me.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "emails",
                        "type": "EmailService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "emails",
                        "type": "EmailService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2 class=\"title\">Email Me | 联系我</h2>\n\n<form class=\"email\" #emailForm=\"ngForm\" (ngSubmit)=\"emails.submit()\">\n    <div class=\"form-ctrl\">\n        <label class=\"required\" for=\"message\">Your message - 信息内容</label>\n        <div class=\"textarea-wrapper\">\n            <textarea rows=\"10\" placeholder=\"Please leave a quick message for me\" id=\"message\" name=\"message\" [(ngModel)]=\"emails.model.message\" required></textarea>\n        </div>\n    </div>\n\n    <section>\n        <div class=\"form-ctrl\">\n            <label for=\"title\">{{ title }}</label>\n            <select id=\"title\" name=\"title\" [(ngModel)]=\"emails.model.title\">\n                <option [value]=\"''\">Click to select - 点击选择</option>\n                <option *ngFor=\"let option of titleOptions\" [value]=\"option\">\n                    {{ option }}\n                </option>\n            </select>\n        </div>\n    \n        <div class=\"form-ctrl\">\n            <label for=\"template\">{{ template }}</label>\n            <select id=\"template\" name=\"template\" [(ngModel)]=\"emails.model.template\">\n                <option [value]=\"''\">Click to select - 点击选择</option>\n                <option *ngFor=\"let option of templateOptions\" [value]=\"option\">\n                    {{ option }}\n                </option>\n            </select>\n        </div>\n    \n        <div class=\"form-ctrl\">\n            <label class=\"required\" for=\"address\">Your email - 您的邮箱</label>\n            <input type=\"email\" placeholder=\"e.g. example@mail.com\" id=\"address\" name=\"address\" [(ngModel)]=\"emails.model.address\" required email />\n        </div>\n        \n        <div>\n            <button class=\"solid\" type=\"submit\" [disabled]=\"!emailForm.form.valid\">Send | 发送</button>\n        </div>\n    </section>\n</form>"
        },
        {
            "name": "FeedComponent",
            "id": "component-FeedComponent-0be387ab4d3e0a67fe9144dfefc6eafc",
            "file": "src/app/home/feed/feed.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-feed",
            "styleUrls": [
                "./feed.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./feed.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "filter",
                    "defaultValue": "'all'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "socials",
                    "type": "SocialService",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "new Subscription()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112,
                        132
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { Filter, SocialService } from '../social.service';\n\n@Component({\n  selector: 'app-feed',\n  templateUrl: './feed.component.html',\n  styleUrls: ['./feed.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class FeedComponent implements OnInit, OnDestroy {\n  private readonly subscriptions = new Subscription();\n  filter: string = 'all';\n\n  constructor(public socials: SocialService) { }\n\n  ngOnInit(): void {\n    this.subscriptions.add(\n      this.socials.getArchivedPosts$.subscribe(() => \n        this.filter = ''\n      )\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n\n  changeFilter() {\n    switch(this.filter) {\n      case 'all':\n        this.socials.getPosts$.next(Filter.ALL);\n        break;\n      case 'events':\n        this.socials.getPosts$.next(Filter.EVENTS);\n        break;\n      case 'updates':\n        this.socials.getPosts$.next(Filter.POSTS);\n        break;\n    };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'src/assets/scss/theme.scss' as theme;\r\n\r\napp-post-card {\r\n    margin: map-get(theme.$spacing, std) map-get(theme.$spacing, page);\r\n}\r\n\r\n.tool-bar {\r\n    width: 100%;\r\n    margin: 0 map-get(theme.$spacing, page);\r\n\r\n    .title {\r\n        display: none;\r\n    }\r\n\r\n    .radio-group {\r\n        display: flex;\r\n    \r\n        label { flex: 1; text-align: center; }\r\n    }\r\n}\r\n\r\n.feed {\r\n    height: calc(100vh - 88px);\r\n}\r\n\r\n@media (min-width: map-get(theme.$screens, laptop)) {\r\n    app-post-card {\r\n        width: calc(50% - 48px - 17.5px);\r\n        margin: map-get(theme.$spacing, std) auto;\r\n    }\r\n\r\n    .tool-bar {\r\n        width: calc(50% - 17.5px);\r\n        margin: auto;\r\n    \r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n\r\n        .title { display: block; }\r\n\r\n        .radio-group {\r\n            label { flex: 0; }\r\n        }\r\n    }\r\n}",
                    "styleUrl": "./feed.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "socials",
                        "type": "SocialService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "socials",
                        "type": "SocialService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<cdk-virtual-scroll-viewport class=\"feed\" itemSize=\"10\">\n    <div class=\"tool-bar\">\n        <h1 class=\"title\">近期动态 Recent Announcements</h1>\n        <article class=\"radio-group\" role=\"group\" (change)=\"changeFilter()\">\n            <input type=\"radio\" id=\"all\" name=\"filter\" value=\"all\" [(ngModel)]=\"filter\">\n            <label for=\"all\">All</label>\n            \n            <input type=\"radio\" id=\"events\" name=\"filter\" value=\"events\" [(ngModel)]=\"filter\">\n            <label for=\"events\">Events</label>\n            \n            <input type=\"radio\" id=\"updates\" name=\"filter\" value=\"updates\" [(ngModel)]=\"filter\">\n            <label for=\"updates\">Posts</label>\n        </article>\n    </div>\n    <app-post *cdkVirtualFor=\"let post of socials.posts$ | async\" [post]=\"post\"></app-post>\n</cdk-virtual-scroll-viewport>"
        },
        {
            "name": "FeedHistoryComponent",
            "id": "component-FeedHistoryComponent-61138f8f8dbd9e3ea469260286509def",
            "file": "src/app/home/feed-history/feed-history.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-feed-history",
            "styleUrls": [
                "./feed-history.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./feed-history.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "showArchive",
                    "defaultValue": "new EventEmitter()",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "months",
                    "defaultValue": "[\n    \"\", \"January\", \"Feburary\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"december\"\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "socials",
                    "type": "SocialService",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { SocialService } from '../social.service';\n\n@Component({\n  selector: 'app-feed-history',\n  templateUrl: './feed-history.component.html',\n  styleUrls: ['./feed-history.component.scss']\n})\nexport class FeedHistoryComponent implements OnInit {\n  @Output() showArchive = new EventEmitter();\n\n  readonly months = [\n    \"\", \"January\", \"Feburary\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"december\"\n  ]\n\n  constructor(public socials: SocialService) { }\n\n  ngOnInit(): void {\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'src/assets/scss/theme.scss' as theme;\r\n\r\n.history {\r\n    position: absolute;\r\n    right: 17.5px;\r\n    top: 0;\r\n    width: calc(25% - 17.5px - 74px);\r\n    margin: map-get(theme.$spacing, std);\r\n    padding: map-get(theme.$spacing, std);\r\n\r\n    border: 1px solid map-get(theme.$palettes, black);\r\n}",
                    "styleUrl": "./feed-history.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "socials",
                        "type": "SocialService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "socials",
                        "type": "SocialService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<dl class=\"history\">\n    <dt>\n        <h2>历史记录<div>History</div></h2>\n    </dt>\n    <ng-container *ngFor=\"let archive of socials.archive$ | async\">\n        <dt>{{ archive.year }}</dt>\n        <dd *ngFor=\"let month of archive.months\">\n            <button (click)=\"socials.getArchivedPosts$.next({ year: archive.year, month: month })\">{{ months[month] }}</button>\n        </dd>\n    </ng-container>\n</dl>"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-1e177bcf92a3c29dafa7e4a516dc0f58",
            "file": "src/app/shared/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [
                "./footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isActive",
                    "line": 16,
                    "type": "boolean"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faFacebookSquare",
                    "defaultValue": "faFacebookSquare",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "faInstagram",
                    "defaultValue": "faInstagram",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "faSoundcloud",
                    "defaultValue": "faSoundcloud",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "faWeixin",
                    "defaultValue": "faWeixin",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "navigations",
                    "type": "NavigationService",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { faFacebookSquare, faInstagram, faSoundcloud, faWeixin } from '@fortawesome/free-brands-svg-icons';\r\nimport { NavigationService } from '../navigation.service';\r\n\r\n@Component({\r\n  selector: 'app-footer',\r\n  templateUrl: './footer.component.html',\r\n  styleUrls: ['./footer.component.scss']\r\n})\r\nexport class FooterComponent implements OnInit {\r\n  readonly faFacebookSquare = faFacebookSquare;\r\n  readonly faInstagram = faInstagram;\r\n  readonly faSoundcloud = faSoundcloud;\r\n  readonly faWeixin = faWeixin;\r\n  \r\n  @Input() isActive?: boolean;\r\n\r\n  constructor(public navigations: NavigationService) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'src/assets/scss/theme.scss' as theme;\r\n\r\n:host {\r\n    padding: 0 map-get(theme.$spacing, page);\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    color: map-get(theme.$palettes, white);\r\n    background-color: map-get(theme.$palettes, black);\r\n}\r\n\r\n.container {\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.navlist {\r\n    margin-bottom: map-get(theme.$spacing, wide);\r\n\r\n    & > li {\r\n        margin: map-get(theme.$spacing, std) 0;\r\n    }\r\n}\r\n\r\n.list-heading {\r\n    font-size: calc(24rem / #{map-get(theme.$text, std)});\r\n}\r\n\r\n.navlink.social {\r\n    color: inherit;\r\n\r\n    & > fa-icon {\r\n        margin-right: 12px;\r\n    }\r\n\r\n    &.facebook > fa-icon { color: #2F80ED; }\r\n    &.instagram > fa-icon { color: #9B4900; }\r\n    &.soundcloud > fa-icon { color: #F2994A; }\r\n    &.weixin > fa-icon { color: #27AE60; }\r\n}\r\n\r\n.foot-note {\r\n    text-align: center;\r\n    font-size: calc(12rem / #{map-get(theme.$text, std)});\r\n}\r\n\r\n@media (min-width: map-get(theme.$screens, laptop)) {\r\n    :host {\r\n        padding: 0 map-get(theme.$spacing, page-wide);\r\n    }\r\n\r\n    .container {\r\n        flex-direction: row;\r\n        justify-content: space-between;\r\n    }\r\n}",
                    "styleUrl": "./footer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "navigations",
                        "type": "NavigationService"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "navigations",
                        "type": "NavigationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<section *ngIf=\"isActive || navigations.footer\" class=\"container\" [style.flex-direction]=\"isActive && 'column'\">\r\n\r\n    <ul class=\"navlist\" *ngIf=\"!isActive\">\r\n        <li>\r\n            <h2 class=\"list-heading\">Navigation</h2>\r\n        </li>\r\n        <li>\r\n            <a class=\"navlink\" routerLink=\"/home\">主页 | Home</a>\r\n        </li>\r\n        <li>\r\n            <a class=\"navlink\" routerLink=\"/updates\">动态 | Updates</a>\r\n        </li>\r\n        <li>\r\n            <a class=\"navlink\" routerLink=\"/discography\">作品集 | Discography</a>\r\n        </li>\r\n        <li>\r\n            <a class=\"navlink\" routerLink=\"/media\">媒体 | Media</a>\r\n        </li>\r\n    </ul>\r\n    \r\n    <ul class=\"navlist\" [style.margin-bottom]=\"isActive && '0'\">\r\n        <li>\r\n            <h2 class=\"list-heading\">Social Media</h2>\r\n        </li>\r\n        <li>\r\n            <a class=\"navlink social facebook\" href=\"#\">\r\n                <fa-icon [icon]=\"faFacebookSquare\" size=\"lg\"></fa-icon>\r\n                <span>Facebook</span>\r\n            </a>\r\n        </li>\r\n        <li>\r\n            <a class=\"navlink social instagram\" href=\"#\">\r\n                <fa-icon [icon]=\"faInstagram\" size=\"lg\"></fa-icon>\r\n                <span>Instagram</span>\r\n            </a>\r\n        </li>\r\n        <li>\r\n            <a class=\"navlink social soundcloud\" href=\"#\">\r\n                <fa-icon [icon]=\"faSoundcloud\" size=\"lg\"></fa-icon>\r\n                <span>Sound Cloud</span>\r\n            </a>\r\n        </li>\r\n        <li>\r\n            <a class=\"navlink social weixin\" href=\"#\">\r\n                <fa-icon [icon]=\"faWeixin\" size=\"lg\"></fa-icon>\r\n                <span>微信</span>\r\n            </a>\r\n        </li>\r\n    </ul>\r\n    \r\n    <ul class=\"navlist\">\r\n        <li>\r\n            <h2 class=\"list-heading\">Legals</h2>\r\n        </li>\r\n        <li>\r\n            <a class=\"navlink\" routerLink=\"/legal\">Privacy Policy | 隐私条款</a>\r\n        </li>\r\n        <li>\r\n            <a class=\"navlink\" routerLink=\"/legal\">Terms & Conditions</a>\r\n        </li>\r\n        <li>\r\n            <a class=\"navlink\" href=\"#\">Login</a>\r\n        </li>\r\n    </ul>\r\n</section>\r\n\r\n<section *ngIf=\"isActive || navigations.footer\" class=\"container\" [style.flex-direction]=\"isActive && 'column'\">\r\n    <p class=\"foot-note\">©2021 Kaze Patricio Chan. All Rights Reserved.</p>\r\n    <p class=\"foot-note\">Web Design by Michael May</p>\r\n</section>"
        },
        {
            "name": "FullPlayerComponent",
            "id": "component-FullPlayerComponent-764f08673e17415e69bfb33755068ae3",
            "file": "src/app/home/full-player/full-player.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-full-player",
            "styleUrls": [
                "./full-player.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./full-player.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundUrl",
                    "defaultValue": "`--bg: url(${metaData.discographyBannerUrl})`",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "song$",
                    "defaultValue": "this.route.paramMap.pipe(\n    switchMap(params => this.musics.get$(params.get('id') || ''))\n  )",
                    "type": "Observable<Song>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport metaData from 'src/meta-data';\nimport { Song } from '../models';\nimport { MusicService } from '../music.service';\n\n@Component({\n  selector: 'app-full-player',\n  templateUrl: './full-player.component.html',\n  styleUrls: ['./full-player.component.scss']\n})\nexport class FullPlayerComponent implements OnInit {\n  readonly backgroundUrl: string = `--bg: url(${metaData.discographyBannerUrl})`;\n  readonly song$: Observable<Song> = this.route.paramMap.pipe(\n    switchMap(params => this.musics.get$(params.get('id') || ''))\n  );\n\n  constructor(private route: ActivatedRoute, private musics: MusicService) { }\n\n  ngOnInit(): void {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'src/assets/scss/theme.scss' as theme;\r\n\r\n.player {\r\n    height: 100vh;\r\n    position: relative;\r\n    padding: 14px;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n\r\n    .subtitle { float: right; }\r\n}\r\n\r\nh1, time {\r\n    padding: 14px;\r\n\r\n    color: map-get(theme.$palettes, white);\r\n    background-color: map-get(theme.$palettes, black);\r\n}\r\n\r\naudio { width: 100%; }\r\n\r\n@media (min-width: map-get(theme.$screens, laptop)) {\r\n    :host {\r\n        height: 100vh;\r\n        display: block;\r\n        padding: map-get(theme.$spacing, page-wide);\r\n\r\n        & > .background {\r\n            height: 80vh;\r\n            z-index: -2;\r\n            background: linear-gradient(transparent 0%, white 75%), var(--bg);\r\n        }\r\n    }\r\n    \r\n    .player {\r\n        height: 500px;\r\n\r\n        .title { display: inline-block; }\r\n    }\r\n}",
                    "styleUrl": "./full-player.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "musics",
                        "type": "MusicService"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "musics",
                        "type": "MusicService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<article *ngIf=\"(song$ | async) as song\" class=\"player\">\n    <section>\n        <div>\n            <h1 class=\"title\">{{ song.title }}</h1>\n        </div>\n        <time class=\"subtitle\" [dateTime]=\"song.created\">{{ song.created | date }}</time>\n    </section>\n\n\n    <audio [src]=\"song.audio$ | async\" controls></audio>\n\n    <div *ngIf=\"(song.coverImage$ | async) as coverImage\" class=\"background\" [style.background-image]=\"'url(' + coverImage + ')'\"></div>\n</article>\n\n<div class=\"background blur\" [style]=\"backgroundUrl\"></div>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-f894d38e5f71ae636886306acf2c9cee",
            "file": "src/app/shared/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isActive",
                    "defaultValue": "true",
                    "line": 12
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faGuitar",
                    "defaultValue": "faGuitar",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "faMusic",
                    "defaultValue": "faMusic",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "onMenuClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { faGuitar, faMusic } from '@fortawesome/free-solid-svg-icons';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss']\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n  faGuitar = faGuitar;\r\n  faMusic = faMusic;\r\n  @Input() isActive = true;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  onMenuClick() {\r\n    console.log('clicked')\r\n    this.isActive = !this.isActive;\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'src/assets/scss/theme.scss' as theme;\r\n\r\n// :host{\r\n//     position: fixed;\r\n//     top: 0;\r\n//     left: 0;\r\n//     right: 0;\r\n// }\r\n\r\n.navbar {\r\n    position: relative;\r\n    height: 48px;\r\n    z-index: 10;\r\n    padding: 0 map-get(theme.$spacing, std);\r\n\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    color: map-get(theme.$palettes, white);\r\n    background-color: map-get(theme.$palettes, black);\r\n\r\n    > button { display: block }\r\n}\r\n\r\n.nav-menu { display: none; }\r\n\r\n.tab-menu {\r\n    height: 34px;\r\n\r\n    color: map-get(theme.$palettes, white);\r\n    background-color: map-get(theme.$palettes, black);\r\n    opacity: .9;\r\n\r\n    fa-icon { color: map-get(theme.$palettes, accent); }\r\n\r\n    &:hover { opacity: 1; }\r\n\r\n    &.inactive {\r\n        margin-top: -34px;\r\n    }\r\n}\r\n\r\n.text {\r\n    display: inline; \r\n    margin: 0 map-get(theme.$spacing, small); \r\n    text-transform: uppercase;\r\n}\r\n\r\n.main { font-size: 12px; }\r\n.alt { font-size: 12px; }\r\n\r\n.title {\r\n    font-size: 20px;\r\n    color: map-get(theme.$palettes, accent);\r\n}\r\n\r\n.dot {\r\n    border: 2px solid white;\r\n    border-radius: 50%;\r\n    margin: 8px 12px auto 12px;\r\n}\r\n\r\n@media (min-width: map-get(theme.$screens, laptop)) {\r\n    .navbar { \r\n        height: 88px;\r\n        > button { display: none }\r\n    }\r\n\r\n    .nav-menu {\r\n        position: static;\r\n        margin-top: 0;\r\n\r\n        display: flex;\r\n        text-align: center;\r\n\r\n        fa-icon { display: none; }\r\n        .text { display: block; }\r\n        .main { font-size: 24px; }\r\n        .alt { font-size: 12px; }\r\n    }\r\n\r\n    .tab-menu { display: none; }\r\n    \r\n    .title {\r\n        font-size: 26px;\r\n    }\r\n\r\n    .dot { display: none; }\r\n}",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"navbar\">\r\n\r\n    <a routerLink=\"/home\">\r\n        <h1 class=\"title\">Kaze Patricio Chan</h1>\r\n    </a>\r\n    \r\n    <button (click)=\"onMenuClick()\">\r\n        <fa-icon [icon]=\"faGuitar\" size=\"2x\"></fa-icon>\r\n    </button>\r\n\r\n    <div class=\"nav-menu\">\r\n        <ng-container *ngTemplateOutlet=\"menu\"></ng-container>\r\n    </div>\r\n</div>\r\n\r\n<app-scrollable-labels class=\"tab-menu\" [class.inactive]=\"!isActive\">\r\n    <ng-container *ngTemplateOutlet=\"menu\"></ng-container>\r\n</app-scrollable-labels>\r\n\r\n<ng-template #menu>\r\n    <a routerLink=\"/updates\">\r\n        <div class=\"text main\">动态</div>\r\n        <fa-icon [icon]=\"faMusic\" size=\"sm\"></fa-icon>\r\n        <div class=\"text alt\">updates</div>\r\n    </a>\r\n    <span class=\"dot\"></span>\r\n    <a routerLink=\"/discography\">\r\n        <div class=\"text main\">作品集</div>\r\n        <fa-icon [icon]=\"faMusic\" size=\"sm\"></fa-icon>\r\n        <div class=\"text alt\">discography</div>\r\n    </a>\r\n    <span class=\"dot\"></span>\r\n    <a routerLink=\"/media\">\r\n        <div class=\"text main\">媒体</div>\r\n        <fa-icon [icon]=\"faMusic\" size=\"sm\"></fa-icon>\r\n        <div class=\"text alt\">media</div>\r\n    </a>\r\n</ng-template>"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-423505715d08be122169bbda350e381d",
            "file": "src/app/home/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'src/assets/scss/theme.scss' as theme;\r\n\r\n@media (min-width: map-get(theme.$screens, laptop)) {\r\n    .divider {\r\n        margin-left: map-get(theme.$spacing, page-wide);\r\n        margin-right: map-get(theme.$spacing, page-wide);\r\n    }\r\n}",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-landing-banner></app-landing-banner>\r\n\r\n<app-showcase></app-showcase>\r\n\r\n<div class=\"divider\"></div>\r\n\r\n<app-quick-feed></app-quick-feed>\r\n\r\n<app-biography></app-biography>\r\n\r\n<app-email-me></app-email-me>"
        },
        {
            "name": "ImageViewerComponent",
            "id": "component-ImageViewerComponent-5bd00913fd30a50b8ccb2780aa049e41",
            "file": "src/app/home/image-viewer/image-viewer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-image-viewer",
            "styleUrls": [
                "./image-viewer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./image-viewer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "closePanel",
                    "defaultValue": "new EventEmitter()",
                    "line": 10,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "media",
                    "type": "MediaService",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Output, EventEmitter } from '@angular/core';\nimport { MediaService } from '../media.service';\n\n@Component({\n  selector: 'app-image-viewer',\n  templateUrl: './image-viewer.component.html',\n  styleUrls: ['./image-viewer.component.scss']\n})\nexport class ImageViewerComponent implements OnInit {\n  @Output() closePanel = new EventEmitter();\n\n  constructor(public media: MediaService) { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".viewer {\r\n    display: block;\r\n    margin: auto;\r\n}",
                    "styleUrl": "./image-viewer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "media",
                        "type": "MediaService"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "media",
                        "type": "MediaService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"(media.current$ | async) as current\">\n    <img class=\"viewer\" [src]=\"current.url$ | async\" height=\"80%\" width=\"80%\" />\n    <time [dateTime]=\"current.created\">{{ current.created | date }}</time>\n</ng-container>"
        },
        {
            "name": "LandingBannerComponent",
            "id": "component-LandingBannerComponent-0d0565b5ceea18d6380b8e2b2625c247",
            "file": "src/app/home/landing-banner/landing-banner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-landing-banner",
            "styleUrls": [
                "./landing-banner.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./landing-banner.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "backgroundUrl",
                    "defaultValue": "`--bg: url(${metaData.homeBannerUrl})`",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "cueActive$",
                    "defaultValue": "interval(5000)\r\n    .pipe(\r\n      map(res => res % 2 == 0),\r\n      takeWhile(() => isPlatformBrowser(this.platformId))\r\n    )",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "faAngleDoubleDown",
                    "defaultValue": "faAngleDoubleDown",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "famousQuotes",
                    "type": "FamousQuoteService",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "quote",
                    "defaultValue": "this.famousQuotes.random()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "scrollDown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit, PLATFORM_ID } from '@angular/core';\r\nimport { FamousQuoteService } from '../famous-quote.service';\r\nimport { faAngleDoubleDown } from '@fortawesome/free-solid-svg-icons';\r\nimport { transition, trigger, useAnimation } from '@angular/animations';\r\nimport { cueAnimation } from '../cue.animation';\r\nimport metaData from 'src/meta-data';\r\nimport { interval, Observable } from 'rxjs';\r\nimport { map, takeWhile } from 'rxjs/operators';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-landing-banner',\r\n  templateUrl: './landing-banner.component.html',\r\n  animations: [\r\n    trigger('cue', [\r\n      transition('* => true', useAnimation(cueAnimation))\r\n    ])\r\n  ],\r\n  styleUrls: ['./landing-banner.component.scss']\r\n})\r\nexport class LandingBannerComponent implements OnInit {\r\n  readonly faAngleDoubleDown = faAngleDoubleDown;\r\n  readonly backgroundUrl: string = `--bg: url(${metaData.homeBannerUrl})`;\r\n\r\n  quote = this.famousQuotes.random();\r\n  cueActive$: Observable<boolean> = interval(5000)\r\n    .pipe(\r\n      map(res => res % 2 == 0),\r\n      takeWhile(() => isPlatformBrowser(this.platformId))\r\n    );\r\n\r\n  constructor(@Inject(PLATFORM_ID) private platformId: Object, public famousQuotes: FamousQuoteService) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  scrollDown() {\r\n    window.scroll({\r\n      top: window.innerHeight,\r\n      left: 0,\r\n      behavior: 'smooth'\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'src/assets/scss/theme.scss' as theme;\r\n\r\n:host {\r\n    position: relative;\r\n    height: 100vh;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    color: map-get(theme.$palettes, white);\r\n}\r\n\r\n.message {\r\n    font-size: calc(36rem / #{map-get(theme.$text, std)});\r\n}\r\n\r\n.author {\r\n    text-align: right;\r\n    font-size: calc(12rem / #{map-get(theme.$text, std)});\r\n}\r\n\r\n.scroll-btn {\r\n    position: absolute;\r\n    left: 0;\r\n    right: 0;\r\n    bottom: 36px;\r\n    margin: auto;\r\n    padding: 0;\r\n}\r\n\r\n.background {\r\n    margin-left: -2.5%;\r\n    padding-left: 2.5%;\r\n\r\n    background:\r\n        linear-gradient(map-get(theme.$palettes, highlight) 0%, red 90%), \r\n        linear-gradient(to right, map-get(theme.$palettes, accent) 0%, yellow 90%), \r\n        var(--bg) 30px,\r\n        var(--bg) 20px;\r\n    background-blend-mode: screen, difference, lighten;\r\n}",
                    "styleUrl": "./landing-banner.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "platformId",
                        "type": "Object"
                    },
                    {
                        "name": "famousQuotes",
                        "type": "FamousQuoteService"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "platformId",
                        "type": "Object",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "famousQuotes",
                        "type": "FamousQuoteService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <div *ngIf=\"(famousQuotes.random$ | async) as quote\">\n    <p class=\"message\">{{ quote.message }}</p>\n    <p class=\"author\">{{ quote.author }}</p>\n</div> -->\n<div *ngIf=\"quote\">\n    <p class=\"message\">{{ quote.message }}</p>\n    <p class=\"author\">{{ quote.author }}</p>\n</div>\n<button class=\"scroll-btn\" [@cue]=\"cueActive$ | async\" (click)=\"scrollDown()\">\n    <fa-icon [icon]=\"faAngleDoubleDown\" size=\"3x\"></fa-icon>\n</button>\n\n<div class=\"background blur\" [style]=\"backgroundUrl\"></div>"
        },
        {
            "name": "LegalComponent",
            "id": "component-LegalComponent-d3a026f9bcbb2e18a7ca5910d5f4c46e",
            "file": "src/app/home/legal/legal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-legal",
            "styleUrls": [
                "./legal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./legal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-legal',\n  templateUrl: './legal.component.html',\n  styleUrls: ['./legal.component.scss']\n})\nexport class LegalComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./legal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>legal works!</p>\n"
        },
        {
            "name": "MediaComponent",
            "id": "component-MediaComponent-5de999564c1bece75ee5470521e136b0",
            "file": "src/app/home/media/media.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-media",
            "styleUrls": [
                "./media.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./media.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "breakpoint$",
                    "defaultValue": "this.breakpointObserver.observe('(min-width: 1024px)').pipe(\r\n    map(res => res.matches)\r\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "filter",
                    "defaultValue": "'all'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "media",
                    "type": "MediaService",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "viewerSub",
                    "defaultValue": "new Subscription()",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        112,
                        132
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "openViewer",
                    "args": [
                        {
                            "name": "item",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { BreakpointObserver } from '@angular/cdk/layout';\r\nimport { GlobalPositionStrategy, Overlay, OverlayConfig } from '@angular/cdk/overlay';\r\nimport { ComponentPortal } from '@angular/cdk/portal';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ImageViewerComponent } from '../image-viewer/image-viewer.component';\r\nimport { Filter, MediaService } from '../media.service';\r\nimport { Media } from '../models';\r\n\r\n@Component({\r\n  selector: 'app-media',\r\n  templateUrl: './media.component.html',\r\n  styleUrls: ['./media.component.scss']\r\n})\r\nexport class MediaComponent implements OnInit, OnDestroy {\r\n  readonly breakpoint$ = this.breakpointObserver.observe('(min-width: 1024px)').pipe(\r\n    map(res => res.matches)\r\n  );\r\n  private readonly viewerSub: Subscription = new Subscription();\r\n  filter: string = 'all';\r\n\r\n  constructor(private breakpointObserver: BreakpointObserver, private overlay: Overlay, public media: MediaService) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.viewerSub.unsubscribe();\r\n  }\r\n\r\n  changeFilter() {\r\n    switch(this.filter) {\r\n      case 'all':\r\n        this.media.getList$.next(Filter.ALL);\r\n        break;\r\n      case 'photos':\r\n        this.media.getList$.next(Filter.PHOTOS);\r\n        break;\r\n      case 'videos':\r\n        this.media.getList$.next(Filter.VIDEOS);\r\n        break;\r\n    };\r\n  }\r\n\r\n  openViewer(item: Media & { coverImage$: any }) {\r\n    this.media.current$.next(item);\r\n    // Clear Image Viewer subscriptions.\r\n    this.viewerSub.unsubscribe();\r\n\r\n    const configs = new OverlayConfig({\r\n      positionStrategy: this.overlay.position().global().centerHorizontally().centerVertically(),\r\n      hasBackdrop: true,\r\n      panelClass: ['modal', 'is-active'],\r\n      // backdropClass: 'modal-background'\r\n    });\r\n\r\n    const overlayRef = this.overlay.create(configs);\r\n    const compRef = overlayRef.attach(new ComponentPortal(ImageViewerComponent));\r\n    overlayRef.backdropClick().subscribe(() =>\r\n      overlayRef.dispose()\r\n    );\r\n    // Listen to close Output event from Image Viewer and add listener to subscription.\r\n    this.viewerSub.add(\r\n      compRef.instance.closePanel.subscribe(() => overlayRef.dispose())\r\n    );\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'src/assets/scss/theme.scss' as theme;\r\n\r\n:host {\r\n    min-height: 100vh;\r\n    margin: map-get(theme.$spacing, std) map-get(theme.$spacing, page);\r\n    display: block;\r\n}\r\n\r\nbutton { padding: 0; }\r\n\r\n.title { display: none; }\r\n\r\n.gallery {\r\n    clear: both;\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    grid-gap: 12px;\r\n    gap: 12px;\r\n\r\n    .gallery-column {\r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n\r\n    .gallery-item {\r\n        width: 100%;\r\n        margin-bottom: 12px;\r\n    }\r\n}\r\n\r\n.radio-group {\r\n    margin: 24px 0;\r\n    display: flex;\r\n    label { flex: 1; text-align: center; }\r\n}\r\n\r\n@media (min-width: map-get(theme.$screens, laptop)) {\r\n    :host { margin: map-get(theme.$spacing, std) map-get(theme.$spacing, page-wide); }\r\n\r\n    .title { display: block; }\r\n\r\n    .gallery {\r\n        grid-template-columns: 1fr 1fr 1fr 1fr;\r\n    }\r\n\r\n    .radio-group {\r\n        float: right;\r\n        label { flex: 0; text-align: left; }\r\n    }\r\n}",
                    "styleUrl": "./media.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver"
                    },
                    {
                        "name": "overlay",
                        "type": "Overlay"
                    },
                    {
                        "name": "media",
                        "type": "MediaService"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "media",
                        "type": "MediaService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<h1 class=\"title\">Media Archive | 媒体资料库</h1>\r\n\r\n<article class=\"radio-group\" role=\"group\" (change)=\"changeFilter()\">\r\n    <input type=\"radio\" id=\"all\" name=\"filter\" value=\"all\" [(ngModel)]=\"filter\">\r\n    <label for=\"all\">All</label>\r\n    \r\n    <input type=\"radio\" id=\"photos\" name=\"filter\" value=\"photos\" [(ngModel)]=\"filter\">\r\n    <label for=\"photos\">Photos</label>\r\n    \r\n    <input type=\"radio\" id=\"videos\" name=\"filter\" value=\"videos\" [(ngModel)]=\"filter\">\r\n    <label for=\"videos\">Videos</label>\r\n</article>\r\n\r\n<section class=\"gallery\">\r\n    <div class=\"gallery-column\" *ngFor=\"let group of (media.list$ | async | group:(breakpoint$ | async) ? 4 : 2)\">\r\n        <button *ngFor=\"let item of group\" (click)=\"openViewer(item)\">\r\n            <img class=\"gallery-item\" [src]=\"item.url$ | async\" />\r\n        </button>\r\n    </div>\r\n</section>\r\n"
        },
        {
            "name": "MusicComponent",
            "id": "component-MusicComponent-bacbbcb8e1a131849d50bea07d379712",
            "file": "src/app/home/music/music.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-music",
            "styleUrls": [
                "./music.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./music.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-music',\n  templateUrl: './music.component.html',\n  styleUrls: ['./music.component.scss']\n})\nexport class MusicComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./music.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-full-player></app-full-player>"
        },
        {
            "name": "MusicGalleryComponent",
            "id": "component-MusicGalleryComponent-700760ebcbc59ae7e42274b184772bc4",
            "file": "src/app/home/music-gallery/music-gallery.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-music-gallery",
            "styleUrls": [
                "./music-gallery.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./music-gallery.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeAlbum$",
                    "defaultValue": "new ReplaySubject<Album>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "activeIndex$",
                    "defaultValue": "new Subject<number>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "backgroundUrl",
                    "defaultValue": "`--bg: url(${metaData.discographyBannerUrl})`",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "delayedAlbums$",
                    "defaultValue": "merge(of(null), this.musics.getSongs$).pipe(\n    switchMapTo(\n      merge(of([]), this.animate(this.musics.albums$))\n    )\n  )",
                    "type": "Observable<Album[]>",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "delayedSongs$",
                    "defaultValue": "this.musics.getAlbums$.pipe(\n    switchMapTo(\n      merge(of([]), this.animate(this.musics.songs$))\n    )\n  )",
                    "type": "Observable<Song[]>",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "faAngleDoubleLeft",
                    "defaultValue": "faAngleDoubleLeft",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "isMobile$",
                    "defaultValue": "merge(\n    of(this.breakpointObserver.isMatched('(max-width: 1023px)')),\n    this.breakpointObserver.observe('(max-width: 1023px)').pipe(\n      map(res => res.matches)\n    )\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "musics",
                    "type": "MusicService",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "subscriptions",
                    "defaultValue": "new Subscription()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        112,
                        132
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "animate",
                    "args": [
                        {
                            "name": "ob",
                            "type": "Observable<T[]>"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 78,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "ob",
                            "type": "Observable<T[]>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "backToAlbum",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "selectAlbum",
                    "args": [
                        {
                            "name": "e",
                            "type": "Album"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "Album",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { transition, trigger, useAnimation } from '@angular/animations';\nimport { BreakpointObserver } from '@angular/cdk/layout';\nimport { AfterViewInit, Component, OnDestroy, OnInit } from '@angular/core';\nimport { combineLatest, from, interval, merge, Observable, of, ReplaySubject, Subject, Subscription, zip } from 'rxjs';\nimport { map, pluck, scan, switchMap, switchMapTo } from 'rxjs/operators';\nimport metaData from 'src/meta-data';\nimport { Album, Song } from '../models';\nimport { MusicService } from '../music.service';\nimport { pressDownAnimation } from '../press-down.animation';\nimport { faAngleDoubleLeft } from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  selector: 'app-music-gallery',\n  templateUrl: './music-gallery.component.html',\n  styleUrls: ['./music-gallery.component.scss'],\n  animations: [\n    trigger('pressDown', [\n      transition('void => *', [useAnimation(pressDownAnimation)])\n    ])\n  ],\n})\nexport class MusicGalleryComponent implements OnInit, OnDestroy, AfterViewInit {\n  readonly faAngleDoubleLeft = faAngleDoubleLeft;\n  readonly backgroundUrl: string = `--bg: url(${metaData.discographyBannerUrl})`;\n  readonly isMobile$ = merge(\n    of(this.breakpointObserver.isMatched('(max-width: 1023px)')),\n    this.breakpointObserver.observe('(max-width: 1023px)').pipe(\n      map(res => res.matches)\n    )\n  );\n  readonly delayedAlbums$: Observable<Album[]> = merge(of(null), this.musics.getSongs$).pipe(\n    switchMapTo(\n      merge(of([]), this.animate(this.musics.albums$))\n    )\n  );\n  readonly delayedSongs$: Observable<Song[]> = this.musics.getAlbums$.pipe(\n    switchMapTo(\n      merge(of([]), this.animate(this.musics.songs$))\n    )\n  );\n  readonly activeIndex$ = new Subject<number>();\n  readonly activeAlbum$ = new ReplaySubject<Album>();\n  private readonly subscriptions = new Subscription();\n\n  constructor(private breakpointObserver: BreakpointObserver, public musics: MusicService) { }\n\n  ngOnInit(): void {\n    this.subscriptions.add(\n      combineLatest([\n        this.isMobile$,\n        merge(of(0), this.activeIndex$),\n        this.musics.albums$\n      ]).subscribe(res => {\n        if(res[0] && res[2] && res[2].length != 0) {\n          this.selectAlbum(res[2][res[1]]);\n        }\n      })\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n\n  ngAfterViewInit(): void {\n    this.musics.getAlbums$.next({ page: '1', size: '10' });\n  }\n\n  selectAlbum(e: Album) {\n    this.activeAlbum$.next(e);\n    this.musics.getSongs$.next(e);\n  }\n\n  backToAlbum(): void {\n    this.musics.getAlbums$.next({ page: '1', size: '10' });\n  }\n\n  private animate<T>(ob: Observable<T[]>) {\n    return zip(\n      ob.pipe(\n        switchMap(res => from(res))\n      ),\n      ob.pipe(\n        switchMapTo(merge(of(null), interval(100)))\n      )\n    ).pipe(\n      pluck('0'),\n      scan<T, T[]>((acc, cur) => [...acc, cur], [])\n    );\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'src/assets/scss/theme.scss' as theme;\r\n\r\n:host {\r\n    color: map-get(theme.$palettes, white);\r\n}\r\n\r\napp-quick-player, app-album-cover {\r\n    height: 100vh;\r\n    // margin: 0;\r\n}\r\n\r\nswiper {\r\n    height: 100vh;\r\n}\r\n\r\np {\r\n    margin: 0;\r\n    z-index: 10;\r\n    pointer-events: none;\r\n}\r\n\r\n.gallery {\r\n    $gap: 12px;\r\n\r\n    margin: 0 map-get(theme.$spacing, page-wide);\r\n\r\n    display: grid;\r\n    grid-template-columns: repeat(4, 1fr);\r\n    grid-gap: $gap;\r\n    gap: $gap;\r\n\r\n    & > app-quick-player, & > button > app-album-cover {\r\n        $offset: $gap * 3 + map-get(theme.$spacing, page-wide) * 2 + theme.$scrollbar2;\r\n        // It seems like each block need to remove border of all border on the row.\r\n        // It's likely caused by \"box-sizing: border-box\" on all;\r\n        $borders: 1px * 2 * 4;\r\n        height: calc((100vw - #{$offset}) / 4 - #{$borders});\r\n    }\r\n}\r\n\r\n@media (min-width: map-get(theme.$screens, laptop)) {\r\n    :host {\r\n        position: relative;\r\n        min-height: 100vh;\r\n        padding: map-get(theme.$spacing, page-wide) 0;\r\n\r\n        display: block;\r\n    }\r\n\r\n    .title {\r\n        margin: 0 map-get(theme.$spacing, page-wide);\r\n        margin-bottom: map-get(theme.$spacing, std);\r\n\r\n        & > * { display: inline; vertical-align: middle; }\r\n    }\r\n\r\n    .background {\r\n        height: 80vh;\r\n        z-index: -2;\r\n\r\n        background: linear-gradient(transparent 0%, white 75%), var(--bg);\r\n    }\r\n}",
                    "styleUrl": "./music-gallery.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver"
                    },
                    {
                        "name": "musics",
                        "type": "MusicService"
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "musics",
                        "type": "MusicService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "AfterViewInit"
            ],
            "templateData": "<!-- Mobile Viewport -->\n<swiper *ngIf=\"isMobile$ | async\" [slidesPerView]=\"1\" [direction]=\"'vertical'\" [autoHeight]=\"true\" (activeIndexChange)=\"activeIndex$.next($event.activeIndex)\">\n    <ng-template *ngFor=\"let album of musics.albums$ | async\" swiperSlide>\n        <app-music-gallery-songs [album]=\"album\" [songs$]=\"musics.songs$\" [activeAlbum$]=\"activeAlbum$\"></app-music-gallery-songs>\n    </ng-template>\n</swiper>\n\n<!-- Desktop Viewport -->\n<ng-container *ngIf=\"!(isMobile$ | async)\">\n    <section class=\"title\">\n        <button (click)=\"backToAlbum()\">\n            <fa-icon [icon]=\"faAngleDoubleLeft\" size=\"3x\"></fa-icon>\n        </button>\n        <h1>Composed by Me | 我的作品</h1>\n    </section>\n    <section class=\"gallery\">\n        <button *ngFor=\"let album of delayedAlbums$ | async\" (click)=\"selectAlbum(album)\" [@pressDown]>\n            <app-album-cover [coverImage]=\"album.coverImage$ | async\">\n                <p>{{ album.title }}</p>\n            </app-album-cover>\n        </button>\n\n        <app-quick-player *ngFor=\"let song of delayedSongs$ | async\" [song]=\"song\" [@pressDown]>\n            <p>{{ song.title }}</p>\n        </app-quick-player>\n    </section>\n\n    <article class=\"background blur\" [style]=\"backgroundUrl\"></article>\n</ng-container>"
        },
        {
            "name": "MusicGallerySongsComponent",
            "id": "component-MusicGallerySongsComponent-89884fefd256a9844f7afe69bf9cd257",
            "file": "src/app/home/music-gallery-songs/music-gallery-songs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-music-gallery-songs",
            "styleUrls": [
                "./music-gallery-songs.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./music-gallery-songs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeAlbum$",
                    "line": 16,
                    "type": "Observable<Album>"
                },
                {
                    "name": "album",
                    "line": 14,
                    "type": "Readonly<Album>"
                },
                {
                    "name": "songs$",
                    "line": 15,
                    "type": "Observable<Song[]>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentSongs$",
                    "type": "Observable<any[]>",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isActive$",
                    "type": "Observable<boolean>",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { Album, Song } from '../models';\n\n// This component exists because nesting SwiperJS in Angular in the same component creates\n// ExpressionChangeAfter error.\n@Component({\n  selector: 'app-music-gallery-songs',\n  templateUrl: './music-gallery-songs.component.html',\n  styleUrls: ['./music-gallery-songs.component.scss']\n})\nexport class MusicGallerySongsComponent implements OnInit {\n  @Input() album!: Readonly<Album>;\n  @Input() songs$!: Observable<Song[]>;\n  @Input() activeAlbum$!: Observable<Album>;\n  currentSongs$?: Observable<any[]>;\n  isActive$?: Observable<boolean>;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.currentSongs$ = this.activeAlbum$.pipe(\n      switchMap(res => res.id == this.album.id ? this.songs$ : of(this.album.songs).pipe(map(x => x.map(el => ({ ...el, coverImage$: this.album.coverImage$ }))))),\n      // skipWhile(res => res.id != this.album.id),\n      // switchMapTo(this.songs$),\n    );\n\n    this.isActive$ = this.activeAlbum$.pipe(\n      map(res => res.id == this.album.id)\n    )\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'src/assets/scss/theme.scss' as theme;\r\n\r\n:host {\r\n    color: black !important;\r\n}\r\n\r\n$gap: 12px;\r\n\r\napp-quick-player, app-album-cover {\r\n    height: 100vh;\r\n    margin: 0;\r\n}\r\n\r\nswiper {\r\n    height: 100vh;\r\n}\r\n\r\np {\r\n    margin: 0;\r\n    z-index: 10;\r\n    pointer-events: none;\r\n}",
                    "styleUrl": "./music-gallery-songs.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<swiper [slidesPerView]=\"1\">\n    <ng-template swiperSlide>\n        <app-album-cover [coverImage]=\"album.coverImage$ | async\">\n            <p>{{ album.title }}</p>\n        </app-album-cover>\n    </ng-template>\n    <ng-template *ngFor=\"let song of currentSongs$ | async\" swiperSlide>\n        <app-quick-player [song]=\"song\" [isActive]=\"true\">\n            <p>{{ song.title }}</p>\n        </app-quick-player>\n    </ng-template>\n</swiper>"
        },
        {
            "name": "NoticeComponent",
            "id": "component-NoticeComponent-14d0a157f4c36a547b18a4877bd23643",
            "file": "src/app/shared/notice/notice.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-notice",
            "styleUrls": [
                "./notice.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./notice.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "messages",
                    "defaultValue": "new Array<string>()",
                    "line": 21,
                    "type": "Array"
                },
                {
                    "name": "refreshTimer$",
                    "defaultValue": "new Subject<void>()",
                    "line": 22,
                    "type": "Subject"
                }
            ],
            "outputsClass": [
                {
                    "name": "closePanel",
                    "defaultValue": "new EventEmitter()",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "subscriptions",
                    "defaultValue": "new Subscription()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        112,
                        132
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { animate, state, style, transition, trigger } from '@angular/animations';\nimport { Component, EventEmitter, HostBinding, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { merge, Observable, of, Subject, Subscription, timer } from 'rxjs';\nimport { scan, switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-notice',\n  templateUrl: './notice.component.html',\n  styleUrls: ['./notice.component.scss'],\n  animations: [\n    trigger('fadeOut', [\n      state('*', style({ opacity: 0 })),\n      transition('void => *', [\n        style({ opacity: 1 }),\n        animate(6000, style({ opacity: 0 }))\n      ])\n    ])\n  ]\n})\nexport class NoticeComponent implements OnInit, OnDestroy {\n  @Input() messages = new Array<string>();\n  @Input() refreshTimer$ = new Subject<void>();\n  @Output() readonly closePanel = new EventEmitter();\n  private readonly subscriptions = new Subscription();\n  \n  constructor() { }\n\n  ngOnInit(): void {\n    this.subscriptions.add(\n      merge(\n        of(null),\n        this.refreshTimer$\n      ).pipe(\n        switchMap(() => timer(6000))\n      ).subscribe(() => this.closePanel.emit())\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./notice.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 24
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<ol>\n    <li *ngFor=\"let message of messages\" [@fadeOut]>\n        <p style=\"background: red;\">{{ message }}</p>\n    </li>\n</ol>"
        },
        {
            "name": "PostComponent",
            "id": "component-PostComponent-63343124b99c1f1bd9226ab2907755f2",
            "file": "src/app/home/post/post.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-post",
            "styleUrls": [
                "./post.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./post.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "post",
                    "line": 10,
                    "type": "Readonly<Post>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { Post } from '../models';\n\n@Component({\n  selector: 'app-post',\n  templateUrl: './post.component.html',\n  styleUrls: ['./post.component.scss']\n})\nexport class PostComponent implements OnInit {\n  @Input() post!: Readonly<Post>;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'src/assets/scss/theme.scss' as theme;\r\n\r\n:host {\r\n    padding: map-get(theme.$spacing, std);\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    border: 1px solid map-get(theme.$palettes, black);;\r\n    background-color: map-get(theme.$palettes, white);\r\n}\r\n\r\np {\r\n    margin-bottom: map-get(theme.$spacing, std);\r\n    font-size: calc(14rem / #{map-get(theme.$text, std)});\r\n}\r\n\r\n.title {\r\n    margin-bottom: map-get(theme.$spacing, std);\r\n\r\n    display: flex;\r\n    align-items: stretch;\r\n\r\n    .text {\r\n        margin-left: 24px;\r\n    \r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: space-between;\r\n    \r\n        h2 { font-size: calc(18rem / #{map-get(theme.$text, std)}); margin: 0; }\r\n    \r\n        .date {\r\n            font-size: calc(12rem / #{map-get(theme.$text, std)});\r\n        }\r\n    }\r\n}\r\n\r\n.gallery {\r\n    display: grid;\r\n    grid-auto-columns: 1fr;\r\n    grid-auto-rows: 100px;\r\n    grid-gap: 8px;\r\n    gap: 8px;\r\n\r\n    img {\r\n        object-fit: cover;\r\n        height: 100%;\r\n    }\r\n\r\n    & > :nth-child(2) {\r\n        grid-column: 2;\r\n    }\r\n\r\n    & > :nth-last-child(5) ~ :nth-child(3),\r\n    & > :nth-last-child(7) ~ :nth-child(3), /* 7 = 5 + 2 */\r\n    & > :nth-last-child(9) ~ :nth-child(3) { /* 9 = 7 + 2 */\r\n        grid-column: 3;\r\n    }\r\n\r\n    & > :nth-last-child(1):nth-child(1),\r\n    & > :nth-last-child(2):nth-child(1),\r\n    & > :nth-last-child(1):nth-child(2) {\r\n        grid-row: 1/3;\r\n    }\r\n}\r\n\r\n@media(min-width: map-get(theme.$screens, tablet)) {\r\n    .gallery {\r\n        grid-auto-rows: 200px;\r\n    }\r\n}",
                    "styleUrl": "./post.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"title\">\n    <img *ngIf=\"(post.thumbnail$ | async) as thumbnail\" [src]=\"thumbnail\" width=\"60px\" height=\"60px\" />\n    <div class=\"text\">\n        <h2>{{ post.title | limit:40 }}</h2>\n        <time class=\"date\" [dateTime]=\"post.created\">{{ post.created | date:'fullDate' }}</time>\n    </div>\n</section>\n\n<p *ngIf=\"post.content\">{{ post.content }}</p>\n\n<div class=\"gallery\" *ngIf=\"post.gallery\">\n    <img *ngFor=\"let media of post.gallery\" [src]=\"media.url$ | async\" width=\"100%\" />\n</div>"
        },
        {
            "name": "QuickFeedComponent",
            "id": "component-QuickFeedComponent-59e8b682ca52c914c005a731fc617ed3",
            "file": "src/app/home/quick-feed/quick-feed.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-quick-feed",
            "styleUrls": [
                "./quick-feed.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./quick-feed.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "socials",
                    "type": "SocialService",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { SocialService } from '../social.service';\n\n@Component({\n  selector: 'app-quick-feed',\n  templateUrl: './quick-feed.component.html',\n  styleUrls: ['./quick-feed.component.scss']\n})\nexport class QuickFeedComponent implements OnInit {\n  \n  constructor(public socials: SocialService) { }\n\n  ngOnInit(): void {\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'src/assets/scss/theme.scss' as theme;\r\n\r\n:host {\r\n    margin: 0 map-get(theme.$spacing, page);\r\n    display: block;\r\n}\r\n\r\napp-post-card {\r\n    border: none;\r\n    padding: 0;\r\n}\r\n\r\n.title {\r\n    text-align: center;\r\n    font-size: map-get(theme.$text, heading);\r\n\r\n    &.empty {\r\n        padding-bottom: 15vh;\r\n    }\r\n}\r\n\r\n@media (min-width: map-get(theme.$screens, laptop)) {\r\n    :host {\r\n        margin: 0 map-get(theme.$spacing, page-wide);\r\n    }\r\n\r\n    ol {\r\n        display: flex;\r\n        justify-content: space-between;\r\n    }\r\n}",
                    "styleUrl": "./quick-feed.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "socials",
                        "type": "SocialService"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "socials",
                        "type": "SocialService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-container *ngIf=\"(socials.latest$ | async) as latest\">\n    <ng-container *ngTemplateOutlet=\"latest.length != 0 ? Content : NoContent; context: {latest:latest}\"></ng-container>\n</ng-container>\n\n<ng-template #Content let-latest=\"latest\">\n    <h2 class=\"title\">Upcoming events | 新活动</h2>\n\n    <ol>\n        <li *ngFor=\"let item of latest\">\n            <a [href]=\"item.link\">\n                <app-post [post]=\"item\"></app-post>\n            </a>\n        </li>\n    </ol>\n</ng-template>\n\n<ng-template #NoContent>\n    <h2 class=\"title empty\">No upcoming event | 近期没有活动</h2>\n</ng-template>"
        },
        {
            "name": "QuickPlayerComponent",
            "id": "component-QuickPlayerComponent-7b1bcf81313a92e8436d5cfcb7063511",
            "file": "src/app/home/quick-player/quick-player.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-quick-player",
            "styleUrls": [
                "./quick-player.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./quick-player.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "song",
                    "line": 16,
                    "type": "Readonly<Song>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "faInfoCircle",
                    "defaultValue": "faInfoCircle",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "faPlayCircle",
                    "defaultValue": "faPlayCircle",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "faSoundcloud",
                    "defaultValue": "faSoundcloud",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "faStopCircle",
                    "defaultValue": "faStopCircle",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "isAudioOn",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "toggleAudio",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [],
                    "line": 26
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "line": 31
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, HostListener, Input, OnInit } from '@angular/core';\nimport { faPlayCircle, faStopCircle, faInfoCircle } from '@fortawesome/free-solid-svg-icons';\nimport { faSoundcloud } from '@fortawesome/free-brands-svg-icons';\nimport { Song } from \"../models\";\n\n@Component({\n  selector: 'app-quick-player',\n  templateUrl: './quick-player.component.html',\n  styleUrls: ['./quick-player.component.scss']\n})\nexport class QuickPlayerComponent implements OnInit {\n  readonly faPlayCircle = faPlayCircle;\n  readonly faStopCircle = faStopCircle;\n  readonly faSoundcloud = faSoundcloud;\n  readonly faInfoCircle = faInfoCircle;\n  @Input() song!: Readonly<Song>;\n  @Input() isActive: boolean = false;\n  isAudioOn: boolean = false;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  @HostListener('mouseenter')\n  mouseEnter() {\n    this.isActive = true;\n  }\n\n  @HostListener('mouseleave')\n  mouseLeave() {\n    if(!this.isAudioOn) {\n      this.isActive = false;\n    }\n  }\n\n  toggleAudio() {\n    this.isAudioOn = !this.isAudioOn;\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'src/assets/scss/theme.scss' as theme;\r\n\r\n:host {\r\n    display: block;\r\n\r\n    & * { z-index: 1; }\r\n}\r\n\r\napp-album-cover {\r\n    height: inherit;\r\n}\r\n\r\n.controls {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n\r\n    & fa-icon { \r\n        margin-left: map-get(theme.$spacing, std); \r\n    }\r\n}\r\n\r\n.audio-toggle {\r\n    position: absolute;\r\n    left: 0;\r\n    right: 0;\r\n    top: 0;\r\n    bottom: 0;\r\n    margin: auto;\r\n}\r\n\r\n.content { \r\n    display: block;\r\n}\r\n\r\n@media (min-width: map-get(theme.$screens, laptop)) {\r\n    .content { \r\n        display: none;\r\n    }\r\n}",
                    "styleUrl": "./quick-player.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-album-cover [coverImage]=\"song.coverImage$ | async\" [class]=\"isActive ? '__hover' : ''\">\n    <ng-container *ngIf=\"isActive; then Controls else Content\"></ng-container>\n</app-album-cover>\n\n<ng-template #Content>\n    <ng-content></ng-content>\n</ng-template>\n\n<ng-template #Controls>\n    <button *ngIf=\"song.audio\" class=\"audio-toggle\" (click)=\"toggleAudio()\">\n        <fa-icon [icon]=\"isAudioOn ? faStopCircle : faPlayCircle\" size=\"6x\"></fa-icon>\n        <audio *ngIf=\"isAudioOn\" [src]=\"song.audio$ | async\" autoplay></audio>\n    </button>\n\n    <article class=\"controls\">\n        <section class=\"content\">\n            <ng-content></ng-content>\n        </section>\n        <a *ngIf=\"song.soundCloud\" [href]=\"song.soundCloud\">\n            <fa-icon [icon]=\"faSoundcloud\"></fa-icon>\n        </a>\n        <a [routerLink]=\"['/music', song.id]\">\n            <fa-icon [icon]=\"faInfoCircle\"></fa-icon>\n        </a>\n    </article>\n</ng-template>"
        },
        {
            "name": "ScrollableLabelsComponent",
            "id": "component-ScrollableLabelsComponent-70cdef3f2dc7fcd43b2fb9f52f45c0db",
            "file": "src/app/shared/scrollable-labels/scrollable-labels.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-scrollable-labels",
            "styleUrls": [
                "./scrollable-labels.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./scrollable-labels.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-scrollable-labels',\r\n  templateUrl: './scrollable-labels.component.html',\r\n  styleUrls: ['./scrollable-labels.component.scss']\r\n})\r\nexport class ScrollableLabelsComponent implements OnInit {\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'src/assets/scss/theme.scss';\r\n\r\n:host {\r\n    overflow: hidden;\r\n    position: relative;\r\n    min-height: 28px;\r\n\r\n    display: block;\r\n}\r\n\r\n.label-list {\r\n    position: absolute;\r\n    left: 0;\r\n    right: 0;\r\n    margin-top: 4px;\r\n    overflow-x: scroll;\r\n    white-space: nowrap;\r\n    /* Increase/Decrease this value for cross-browser compatibility */\r\n    top: -17.5px;\r\n    bottom: -17.5px;\r\n    padding-top: 17.5px;\r\n    padding-bottom: 17.5px;\r\n\r\n    display: flex;\r\n    padding-left: map-get($spacing, wide);\r\n    .end-pad {\r\n        margin-left: map-get($spacing, wide);\r\n        opacity: 0;\r\n        &::after { content: '_'; }\r\n    }\r\n}\r\n\r\n.edge-fade {\r\n    position: absolute;\r\n    top: 0;\r\n    bottom: 0;\r\n    width: 15vw;\r\n    z-index: 10;\r\n}\r\n\r\n.edge-fade.left {\r\n    left: 0;\r\n    background-image: linear-gradient(to right, rgba(0,0,0,.5), transparent);\r\n}\r\n\r\n.edge-fade.right {\r\n    right: 0;\r\n    background-image: linear-gradient(to left, rgba(0,0,0,.5), transparent);\r\n}\r\n\r\n// /* Hide scrollbar for Chrome, Safari and Opera */\r\n// :host::-webkit-scrollbar {\r\n//     display: none;\r\n// }\r\n\r\n// /* Hide scrollbar for IE, Edge and Firefox */\r\n// :host {\r\n//     display: flex;\r\n//     overflow-x: scroll;\r\n//   -ms-overflow-style: none;  /* IE and Edge */\r\n//   scrollbar-width: none;  /* Firefox */\r\n// }",
                    "styleUrl": "./scrollable-labels.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<span class=\"edge-fade left\"></span>\r\n<div class=\"label-list\">\r\n    <ng-content></ng-content>\r\n    <div class=\"end-pad\"></div>\r\n</div>\r\n<span class=\"edge-fade right\"></span>"
        },
        {
            "name": "ShowcaseComponent",
            "id": "component-ShowcaseComponent-4a323a2cb0933215a54948dd223fb87c",
            "file": "src/app/home/showcase/showcase.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-showcase",
            "styleUrls": [
                "./showcase.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./showcase.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "animate$",
                    "line": 22,
                    "type": "Observable<void>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "breakpoint$",
                    "defaultValue": "this.breakpointObserver.observe('(min-width: 1024px)').pipe(\n    map(res => res.matches)\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "hover",
                    "type": "Song",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "items$",
                    "type": "Observable<Song[]>",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "largeItem$",
                    "type": "Observable<Song>",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "oversizeItem$",
                    "type": "Observable<Song>",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "wideItems$",
                    "type": "Observable<Song[]>",
                    "optional": true,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "initCollection",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                }
            ],
            "hostBindings": [
                {
                    "name": "style.display",
                    "defaultValue": "'block'",
                    "line": 23,
                    "type": "string"
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, HostBinding, Input, OnInit } from '@angular/core';\nimport { from, interval, merge, Observable, of, zip } from 'rxjs';\nimport { map, pluck, scan, share, skip, switchMap, take, tap } from 'rxjs/operators';\nimport { MusicService } from '../music.service';\nimport { BreakpointObserver } from '@angular/cdk/layout';\nimport { Song } from '../models';\nimport { transition, trigger, useAnimation } from '@angular/animations';\nimport { slideInAnimation } from '../slide-in.animation';\n\n\n@Component({\n  selector: 'app-showcase',\n  templateUrl: './showcase.component.html',\n  styleUrls: ['./showcase.component.scss'],\n  animations: [\n    trigger('slideIn', [\n      transition('void => *', [useAnimation(slideInAnimation)])\n    ])\n  ],\n})\nexport class ShowcaseComponent implements OnInit {\n  @Input() animate$!: Observable<void>;\n  @HostBinding('style.display') private display: string = 'block';\n\n  oversizeItem$?: Observable<Song>;\n  largeItem$?: Observable<Song>;\n  wideItems$?: Observable<Song[]>;\n  items$?: Observable<Song[]>;\n  hover?: Song;\n\n  breakpoint$ = this.breakpointObserver.observe('(min-width: 1024px)').pipe(\n    map(res => res.matches)\n  );\n\n  constructor(private musics: MusicService, private breakpointObserver: BreakpointObserver) { }\n\n  ngOnInit(): void {\n    this.initCollection();\n  }\n\n  private initCollection() {\n    var collection$ = zip(\n      this.musics.showcase$.pipe(\n        tap(res => this.display = res.length == 0 ? 'none' : 'block'),\n        switchMap(res => from(res))\n      ),\n      this.animate$.pipe(\n        take(1),\n        switchMap(() => merge(of(null), interval(100)))\n      )\n    ).pipe(\n      pluck('0'),\n      // tap(res => this.entryFade(res)),\n      share()\n    );\n\n    this.oversizeItem$ = collection$.pipe(\n      take(1)\n    );\n    this.largeItem$ = collection$.pipe(\n      skip(1),\n      take(1),\n    );\n    this.wideItems$ = collection$.pipe(\n      skip(2),\n      scan<Song, Song[]>((acc, cur) => [...acc, cur], []),\n      take(3),\n    );\n    this.items$ = collection$.pipe(\n      skip(5),\n      scan<Song, Song[]>((acc, cur) => [...acc, cur], []),\n      take(4)\n    );\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'src/assets/scss/theme.scss' as theme;\r\n\r\n:host {\r\n    display: block;\r\n    padding-top: map-get(theme.$spacing, large);\r\n    background-color: map-get(theme.$palettes, white);\r\n}\r\n\r\np, span { \r\n    margin: 0;\r\n    z-index: 10;\r\n    pointer-events: none;\r\n}\r\n\r\n.title { \r\n    margin: 0 map-get(theme.$spacing, page); \r\n    margin-bottom: map-get(theme.$spacing, std);\r\n}\r\n\r\n.oversize .info {\r\n    align-items: flex-end;\r\n}\r\n\r\n.large .subtitle {\r\n    text-align: end;\r\n}\r\n\r\n.large .info, .wide .info {\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n}\r\n\r\n.small .info {\r\n    justify-content: flex-end;\r\n    align-items: flex-end;\r\n}\r\n\r\n.split {\r\n    margin: 0 24px;\r\n}\r\n\r\n.info {\r\n    width: 100%;\r\n    height: 100%;\r\n\r\n    display: flex;\r\n}\r\n\r\n.subtitle {\r\n    font-size: calc(18rem / #{map-get(theme.$text, std)});\r\n}\r\n\r\n.grid {\r\n    $gap: 12px;\r\n    // For .small to be square, it's width ratio divides it's height ratio. So (3/12) / (4/12) = 0.75.\r\n    $sqr-ratio: 0.75;\r\n    $offset: map-get(theme.$spacing, page-wide) * 2 + theme.$scrollbar;\r\n    // gap is ignored in height calculation, so we need to remove it.\r\n    // It's likely caused by \"box-sizing: border-box\" on all;\r\n    height: calc((100vw - #{$offset}) * #{$sqr-ratio} - (#{$gap} * 3));\r\n    margin: 0 map-get(theme.$spacing, page-wide);\r\n\r\n    display: grid;\r\n    grid-template-rows: repeat(12, 1fr);\r\n    grid-template-columns: repeat(12, 1fr);\r\n    grid-gap: $gap;\r\n    gap: $gap;\r\n\r\n    & > app-quick-player { height: 100%; }\r\n\r\n    & > .oversize { \r\n        grid-area: auto / auto / span 6 / span 8;\r\n        font-size: calc(36rem / #{map-get(theme.$text, std)});\r\n    }\r\n\r\n    & > .large { grid-area: auto / auto / span 6 / span 4; }\r\n\r\n    & > .wide { \r\n        grid-area: auto / auto / span 2 / span 4;\r\n        font-size: calc(24rem / #{map-get(theme.$text, std)});\r\n    }\r\n\r\n    & > .small {\r\n        grid-area: auto / auto / span 4 / span 3;\r\n        font-size: calc(24rem / #{map-get(theme.$text, std)});\r\n    }\r\n}\r\n\r\n\r\n@media (min-width: map-get(theme.$screens, laptop)) {\r\n    .title { \r\n        margin: 0 map-get(theme.$spacing, page-wide);\r\n        margin-bottom: map-get(theme.$spacing, std);\r\n    }\r\n}",
                    "styleUrl": "./showcase.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "musics",
                        "type": "MusicService"
                    },
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver"
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "musics",
                        "type": "MusicService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "breakpointObserver",
                        "type": "BreakpointObserver",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2 class=\"title\">Showcase | 作品一览</h2>\n\n<!-- Mobile Viewport -->\n<swiper *ngIf=\"!(breakpoint$ | async)\" [slidesPerView]=\"1.5\" [spaceBetween]=\"24\" [slidesOffsetBefore]=\"24\"\n    [slidesOffsetAfter]=\"24\">\n    <ng-template *ngIf=\"(oversizeItem$ | async) as item\" swiperSlide>\n        <app-quick-player class=\"large\" [song]=\"item\">\n            <ng-container *ngTemplateOutlet=\"defaultItem; context: {item:item}\"></ng-container>\n        </app-quick-player>\n    </ng-template>\n    <ng-template *ngIf=\"(largeItem$ | async) as item\" swiperSlide>\n        <app-quick-player class=\"large\" [song]=\"item\">\n            <ng-container *ngTemplateOutlet=\"defaultItem; context: {item:item}\"></ng-container>\n        </app-quick-player>\n    </ng-template>\n    <ng-template *ngFor=\"let item of wideItems$ | async\" swiperSlide>\n        <app-quick-player class=\"wide\" [song]=\"item\">\n            <ng-container *ngTemplateOutlet=\"defaultItem; context: {item:item}\"></ng-container>\n        </app-quick-player>\n    </ng-template>\n    <ng-template *ngFor=\"let item of items$ | async\" swiperSlide>\n        <app-quick-player class=\"small\" [song]=\"item\">\n            <p>{{ item.title }}</p>\n        </app-quick-player>\n    </ng-template>\n</swiper>\n\n<!-- Desktop Viewport -->\n<section class=\"grid\" *ngIf=\"breakpoint$ | async\">\n    <app-quick-player class=\"oversize\" *ngIf=\"(oversizeItem$ | async) as item\" [song]=\"item\" [@slideIn]>\n        <section class=\"info\">\n            <p>{{ item.title }}</p>\n            <span class=\"split\">|</span>\n            <p class=\"subtitle\">{{ item.genre | limit:40 }}</p>\n        </section>\n    </app-quick-player>\n    <app-quick-player class=\"large\" *ngIf=\"(largeItem$ | async) as item\" [song]=\"item\" [@slideIn]>\n        <ng-container *ngTemplateOutlet=\"defaultItem; context: {item:item}\"></ng-container>\n    </app-quick-player>\n    <app-quick-player class=\"wide\" *ngFor=\"let item of wideItems$ | async\" [song]=\"item\" [@slideIn]>\n        <ng-container *ngTemplateOutlet=\"defaultItem; context: {item:item}\"></ng-container>\n    </app-quick-player>\n    <app-quick-player class=\"small\" *ngFor=\"let item of items$ | async\" [song]=\"item\" [@slideIn]>\n        <section class=\"info\">\n            <p>{{ item.title }}</p>\n        </section>\n    </app-quick-player>\n</section>\n\n<!-- The generic item that is slotted in through ng-container. {item:item} and let-item=\"item\" syntax is for passing template context variables -->\n<ng-template let-item=\"item\" #defaultItem>\n    <section class=\"info\">\n        <p>{{ item.title }}</p>\n        <p class=\"subtitle\">{{ item.genre | limit }}</p>\n    </section>\n</ng-template>"
        },
        {
            "name": "UpdatesComponent",
            "id": "component-UpdatesComponent-13ed1c032db4310905974cc9ae2c525f",
            "file": "src/app/home/updates/updates.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-updates",
            "styleUrls": [
                "./updates.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./updates.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { NavigationService } from 'src/app/shared/navigation.service';\r\n\r\n@Component({\r\n  selector: 'app-updates',\r\n  templateUrl: './updates.component.html',\r\n  styleUrls: ['./updates.component.scss']\r\n})\r\nexport class UpdatesComponent implements OnInit, OnDestroy {\r\n\r\n  constructor(private navigations: NavigationService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.navigations.footer = false;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.navigations.footer = true;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'src/assets/scss/theme.scss' as theme;\r\n\r\napp-footer {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 17.5px;\r\n    width: calc(25% - 17.5px - 74px);\r\n    height: calc(100vh - 88px);\r\n    margin: 0 map-get(theme.$spacing, std);\r\n    padding: 0;\r\n\r\n    display: none;\r\n    justify-content: space-between;\r\n\r\n    color: map-get(theme.$palettes, black);\r\n    background-color: transparent;\r\n}\r\n\r\napp-feed-history {\r\n    display: none;\r\n}\r\n\r\n@media (min-width: map-get(theme.$screens, laptop)) {\r\n    :host {\r\n        position: relative;\r\n        display: block;\r\n    }\r\n\r\n    app-footer {\r\n        display: flex;\r\n    }\r\n\r\n    app-feed-history {\r\n        display: block;\r\n    }\r\n}",
                    "styleUrl": "./updates.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "navigations",
                        "type": "NavigationService"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "navigations",
                        "type": "NavigationService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-feed></app-feed>\r\n\r\n<app-feed-history></app-feed-history>\r\n\r\n<app-footer [isActive]=\"true\"></app-footer>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppServerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AlbumCoverComponent"
                        },
                        {
                            "name": "BiographyComponent"
                        },
                        {
                            "name": "DiscographyComponent"
                        },
                        {
                            "name": "EmailMeComponent"
                        },
                        {
                            "name": "FeedComponent"
                        },
                        {
                            "name": "FeedHistoryComponent"
                        },
                        {
                            "name": "FullPlayerComponent"
                        },
                        {
                            "name": "HomeComponent"
                        },
                        {
                            "name": "ImageViewerComponent"
                        },
                        {
                            "name": "LandingBannerComponent"
                        },
                        {
                            "name": "LegalComponent"
                        },
                        {
                            "name": "MediaComponent"
                        },
                        {
                            "name": "MusicComponent"
                        },
                        {
                            "name": "MusicGalleryComponent"
                        },
                        {
                            "name": "MusicGallerySongsComponent"
                        },
                        {
                            "name": "PostComponent"
                        },
                        {
                            "name": "QuickFeedComponent"
                        },
                        {
                            "name": "QuickPlayerComponent"
                        },
                        {
                            "name": "ShowcaseComponent"
                        },
                        {
                            "name": "UpdatesComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HomeRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "GroupPipe"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "LimitPipe"
                        },
                        {
                            "name": "NoticeComponent"
                        },
                        {
                            "name": "ScrollableLabelsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "GroupPipe"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "LimitPipe"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "__non_webpack_require__",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "type": "NodeRequire"
            },
            {
                "name": "cueAnimation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/cue.animation.ts",
                "type": "",
                "defaultValue": "animation([\r\n    animate('600ms ease-out', keyframes([\r\n        style({ bottom: '*' }),\r\n        style({ bottom: '0' }),\r\n        style({ bottom: '*' })\r\n    ]))\r\n])"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/quick-player/quick-player.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/quick-feed/quick-feed.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/post/post.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/music-gallery/music-gallery.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/landing-banner/landing-banner.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/full-player/full-player.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/feed/feed.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/feed-history/feed-history.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/showcase/showcase.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/email-me/email-me.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/biography/biography.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n    component: BiographyComponent,\r\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/footer/footer.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n    component: FooterComponent,\r\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/header/header.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n    component: HeaderComponent,\r\n})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/album-cover/album-cover.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/scrollable-labels/scrollable-labels.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n    component: ScrollableLabelsComponent,\r\n    template: `\r\n        <app-scrollable-labels>\r\n            <div class=\"label\">Scrollable Label #1</div>\r\n            <div class=\"label\">Scrollable Label #2</div>\r\n            <div class=\"label\">Scrollable Label #3</div>\r\n            <div class=\"label\">Scrollable Label #4</div>\r\n            <div class=\"label\">Scrollable Label #5</div>\r\n            <div class=\"label\">Scrollable Label #6</div>\r\n            <div class=\"label\">Scrollable Label #7</div>\r\n            <div class=\"label\">Scrollable Label #8</div>\r\n            <div class=\"label\">Scrollable Label #9</div>\r\n            <div class=\"label\">Scrollable Label #10</div>\r\n        </app-scrollable-labels>\r\n        <style>\r\n            .label {\r\n                color: red;\r\n                margin: 0 12px;\r\n            }\r\n        </style>\r\n    `\r\n})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.china.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n  backend: 'http://kazepatriciochan.kfntech.cn/api'\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.intl.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n  backend: 'http://kazepatriciochan.com/api'\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  backend: 'http://localhost:5000',\r\n  // media: 'http://localhost:3000'\r\n  media: 'http://125.49.75.2:30531/patriciopersonal_staging'\r\n}"
            },
            {
                "name": "Hover",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/album-cover/album-cover.stories.ts",
                "type": "Story<Album>",
                "defaultValue": "args => ({\r\n    component: AlbumCoverComponent,\r\n    props: {\r\n        ...args,\r\n        isHover: true,\r\n        // selectId: action('selectId')\r\n    }\r\n})"
            },
            {
                "name": "Hover",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/quick-player/quick-player.stories.ts",
                "type": "Story<>",
                "defaultValue": "args => ({\r\n    component: QuickPlayerComponent,\r\n    props: { \r\n        song: { ...args, coverImage$: of(args.coverImage), audio$: of(args.audio) },\r\n        isActive: true\r\n    },\r\n})"
            },
            {
                "name": "mainModule",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "type": "",
                "defaultValue": "__non_webpack_require__.main"
            },
            {
                "name": "MenuClosed",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/header/header.stories.ts",
                "type": "",
                "defaultValue": "() => ({\r\n    component: HeaderComponent,\r\n    props: {\r\n        isActive: false\r\n    },\r\n})"
            },
            {
                "name": "MockDataProvider",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/mock-data.interceptor.ts",
                "type": "object",
                "defaultValue": "{\r\n    // use fake backend in place of Http service for backend-less development\r\n    provide: HTTP_INTERCEPTORS,\r\n    useClass: MockDataInterceptor,\r\n    multi: true\r\n}"
            },
            {
                "name": "MockModelProvider",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/mock-model.interceptor.ts",
                "type": "object",
                "defaultValue": "{\r\n    // use fake backend in place of Http service for backend-less development\r\n    provide: HTTP_INTERCEPTORS,\r\n    useClass: MockModelInterceptor,\r\n    multi: true\r\n}"
            },
            {
                "name": "model",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/email-me/email-me.stories.ts",
                "type": "any",
                "defaultValue": "{}"
            },
            {
                "name": "moduleFilename",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "server.ts",
                "type": "",
                "defaultValue": "mainModule && mainModule.filename || ''"
            },
            {
                "name": "openapi",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/mock-model.interceptor.ts",
                "type": "",
                "defaultValue": "require('/../openapi.json')"
            },
            {
                "name": "pressDownAnimation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/press-down.animation.ts",
                "type": "",
                "defaultValue": "animation([\r\n    animate('600ms ease-in', keyframes([\r\n        style({ opacity: 0 }),\r\n        style({ opacity: 1, transform: 'scale(1.03)' }),\r\n        style({ transform: 'scale(1)' })\r\n    ]))\r\n])"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/mock-model.interceptor.ts",
                "type": "any"
            },
            {
                "name": "showcase$",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/showcase/showcase.stories.ts",
                "type": "",
                "defaultValue": "new Subject<Song[]>()"
            },
            {
                "name": "slideInAnimation",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/slide-in.animation.ts",
                "type": "",
                "defaultValue": "animation([\r\n    animate('600ms ease-out', keyframes([\r\n        style({ opacity: 0, transform: 'translateX(-24px)' }),\r\n        style({ opacity: 1, transform: 'translateX(0)' })\r\n    ]))\r\n])"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/landing-banner/landing-banner.stories.ts",
                "type": "Story<any>",
                "defaultValue": "args => {\r\n    class MockFamousQuoteService implements Partial<FamousQuoteService> {     \r\n        public random() {\r\n          return {\r\n            author: 'Charles Schwab',\r\n            message: 'Be hearty in your approbation and lavish in your praise.'\r\n          }\r\n        }\r\n    }\r\n\r\n    return {\r\n        moduleMetadata: {\r\n            providers: [{ provide: FamousQuoteService, useClass: MockFamousQuoteService }]\r\n        },\r\n        component: LandingBannerComponent\r\n    }\r\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/post/post.stories.ts",
                "type": "Story<Post>",
                "defaultValue": "args => ({\r\n    component: PostComponent,\r\n    props: { post: args },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/album-cover/album-cover.stories.ts",
                "type": "Story<Album>",
                "defaultValue": "args => {\r\n    return {\r\n        component: AlbumCoverComponent,\r\n        props: args\r\n    }\r\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/quick-feed/quick-feed.stories.ts",
                "type": "Story<any>",
                "defaultValue": "args => {\r\n    class MockSocialService implements Partial<SocialService> {\r\n        readonly latest$: Observable<QuickEvent[]> = of([]);\r\n    }\r\n\r\n    return {\r\n        moduleMetadata: {\r\n            providers: [{ provide: SocialService, useClass: MockSocialService }]\r\n        },\r\n        component: QuickFeedComponent\r\n    }\r\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/feed/feed.stories.ts",
                "type": "Story<any>",
                "defaultValue": "args => {\r\n    class MockSocialService implements Partial<SocialService> {\r\n        readonly getArchivedPosts$ = new Subject<{ year: string | number, month: string | number }>();\r\n        private archivedPosts$ = this.getArchivedPosts$.pipe(\r\n          switchMap(res => of([]))\r\n        );\r\n      \r\n        readonly getPosts$ = new BehaviorSubject<Filter>(Filter.ALL);\r\n        private readonly allPosts$ = this.getPosts$.pipe(\r\n          switchMap(res => of([]))\r\n        );\r\n      \r\n        readonly posts$: Observable<Post[]> = merge(\r\n          this.allPosts$,\r\n          this.archivedPosts$\r\n        );\r\n      \r\n        readonly archive$: Observable<Array<{ year: number, months: number[] }>> = of([])\r\n    }\r\n\r\n    return {\r\n        moduleMetadata: {\r\n            providers: [{ provide: SocialService, useClass: MockSocialService }]\r\n        },\r\n        component: FeedComponent\r\n    }\r\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/quick-player/quick-player.stories.ts",
                "type": "Story<>",
                "defaultValue": "args => ({\r\n    component: QuickPlayerComponent,\r\n    props: { \r\n        song: { ...args, coverImage$: of(args.coverImage), audio$: of(args.audio) } \r\n    },\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/feed-history/feed-history.stories.ts",
                "type": "Story<any>",
                "defaultValue": "args => {\r\n    class MockSocialService implements Partial<SocialService> {\r\n        readonly getArchivedPosts$ = new Subject<{ year: string | number, month: string | number }>();\r\n        archivedPosts$ = this.getArchivedPosts$.pipe(\r\n          switchMap(res => of([]))\r\n        );\r\n    }\r\n\r\n    return {\r\n        moduleMetadata: {\r\n            providers: [{ provide: SocialService, useClass: MockSocialService }]\r\n        },\r\n        component: FeedHistoryComponent\r\n    }\r\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/music-gallery/music-gallery.stories.ts",
                "type": "Story<>",
                "defaultValue": "args => {\r\n    class MockStaticFileService implements Partial<StaticFileService> {\r\n        get(fileName: string) {\r\n            return of('assets/images/banner-1.jpg');\r\n        }\r\n    }\r\n\r\n    return {\r\n        moduleMetadata: {\r\n            providers: [\r\n                { provide: MusicService, useClass: MockMusicService },\r\n                { provide: StaticFileService, useClass: MockStaticFileService }\r\n            ]\r\n        },\r\n        component: MusicGalleryComponent\r\n    }\r\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/full-player/full-player.stories.ts",
                "type": "Story<any>",
                "defaultValue": "args => {\r\n    class MockMusicService implements Partial<MusicService> {\r\n        get$(id: string) {\r\n            return of({} as any)\r\n        }\r\n    }\r\n\r\n    return {\r\n        moduleMetadata: {\r\n            providers: [{ provide: MusicService, useClass: MockMusicService }]\r\n        },\r\n        component: FullPlayerComponent\r\n    }\r\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/showcase/showcase.stories.ts",
                "type": "Story<>",
                "defaultValue": "args => {\r\n    const data = {\r\n        ...args,\r\n        coverImage$: of(args.coverImage),\r\n        audio$: of(args.audio),\r\n    }\r\n\r\n    showcase$.next(Array.from({ length: args.count }).map(() => data));\r\n    // class MockMusicService implements Partial<MusicService> {\r\n    //     readonly showcase$: Observable<Song[]> = merge(\r\n    //         of(Array.from({ length: args.count }).map(() => data)), \r\n    //         showcase$\r\n    //     );\r\n    // }\r\n    class MockStaticFileService implements Partial<StaticFileService> {\r\n        get(fileName: string) {\r\n            return of('assets/images/banner-1.jpg');\r\n        }\r\n    }\r\n\r\n    return {\r\n        // moduleMetadata: {\r\n        //     providers: [{ provide: MusicService, useClass: MockMusicService }]\r\n        // },\r\n        moduleMetadata: {\r\n            providers: [{ provide: StaticFileService, useClass: MockStaticFileService }]\r\n        },\r\n        component: ShowcaseComponent,\r\n        props: {\r\n            animate$: of(null)\r\n        }\r\n    }\r\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/home/email-me/email-me.stories.ts",
                "type": "Story<Email>",
                "defaultValue": "args => {\r\n    Object.assign(model, args);\r\n    class MockEmailService implements Partial<EmailService> {\r\n        readonly model: Email = model;\r\n\r\n        submit() {\r\n\r\n        }\r\n\r\n        reset() {\r\n\r\n        }\r\n    }\r\n\r\n    return {\r\n        moduleMetadata: {\r\n            providers: [{ provide: EmailService, useClass: MockEmailService }]\r\n        },\r\n        component: EmailMeComponent\r\n    }\r\n}"
            }
        ],
        "functions": [
            {
                "name": "app",
                "file": "server.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "express.Express"
            },
            {
                "name": "run",
                "file": "server.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "void"
            }
        ],
        "typealiases": [],
        "enumerations": [
            {
                "name": "Filter",
                "childs": [
                    {
                        "name": "ALL",
                        "value": ""
                    },
                    {
                        "name": "PHOTOS",
                        "value": "/Image"
                    },
                    {
                        "name": "VIDEOS",
                        "value": "/Video"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/home/media.service.ts"
            },
            {
                "name": "Filter",
                "childs": [
                    {
                        "name": "ALL",
                        "value": ""
                    },
                    {
                        "name": "EVENTS",
                        "value": "/Event"
                    },
                    {
                        "name": "POSTS",
                        "value": "/Update"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/home/social.service.ts"
            }
        ],
        "groupedVariables": {
            "server.ts": [
                {
                    "name": "__non_webpack_require__",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "type": "NodeRequire"
                },
                {
                    "name": "mainModule",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "type": "",
                    "defaultValue": "__non_webpack_require__.main"
                },
                {
                    "name": "moduleFilename",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "server.ts",
                    "type": "",
                    "defaultValue": "mainModule && mainModule.filename || ''"
                }
            ],
            "src/app/home/cue.animation.ts": [
                {
                    "name": "cueAnimation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/cue.animation.ts",
                    "type": "",
                    "defaultValue": "animation([\r\n    animate('600ms ease-out', keyframes([\r\n        style({ bottom: '*' }),\r\n        style({ bottom: '0' }),\r\n        style({ bottom: '*' })\r\n    ]))\r\n])"
                }
            ],
            "src/app/home/quick-player/quick-player.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/quick-player/quick-player.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Hover",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/quick-player/quick-player.stories.ts",
                    "type": "Story<>",
                    "defaultValue": "args => ({\r\n    component: QuickPlayerComponent,\r\n    props: { \r\n        song: { ...args, coverImage$: of(args.coverImage), audio$: of(args.audio) },\r\n        isActive: true\r\n    },\r\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/quick-player/quick-player.stories.ts",
                    "type": "Story<>",
                    "defaultValue": "args => ({\r\n    component: QuickPlayerComponent,\r\n    props: { \r\n        song: { ...args, coverImage$: of(args.coverImage), audio$: of(args.audio) } \r\n    },\r\n})"
                }
            ],
            "src/app/home/quick-feed/quick-feed.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/quick-feed/quick-feed.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/quick-feed/quick-feed.stories.ts",
                    "type": "Story<any>",
                    "defaultValue": "args => {\r\n    class MockSocialService implements Partial<SocialService> {\r\n        readonly latest$: Observable<QuickEvent[]> = of([]);\r\n    }\r\n\r\n    return {\r\n        moduleMetadata: {\r\n            providers: [{ provide: SocialService, useClass: MockSocialService }]\r\n        },\r\n        component: QuickFeedComponent\r\n    }\r\n}"
                }
            ],
            "src/app/home/post/post.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/post/post.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/post/post.stories.ts",
                    "type": "Story<Post>",
                    "defaultValue": "args => ({\r\n    component: PostComponent,\r\n    props: { post: args },\r\n})"
                }
            ],
            "src/app/home/music-gallery/music-gallery.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/music-gallery/music-gallery.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/music-gallery/music-gallery.stories.ts",
                    "type": "Story<>",
                    "defaultValue": "args => {\r\n    class MockStaticFileService implements Partial<StaticFileService> {\r\n        get(fileName: string) {\r\n            return of('assets/images/banner-1.jpg');\r\n        }\r\n    }\r\n\r\n    return {\r\n        moduleMetadata: {\r\n            providers: [\r\n                { provide: MusicService, useClass: MockMusicService },\r\n                { provide: StaticFileService, useClass: MockStaticFileService }\r\n            ]\r\n        },\r\n        component: MusicGalleryComponent\r\n    }\r\n}"
                }
            ],
            "src/app/home/landing-banner/landing-banner.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/landing-banner/landing-banner.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/landing-banner/landing-banner.stories.ts",
                    "type": "Story<any>",
                    "defaultValue": "args => {\r\n    class MockFamousQuoteService implements Partial<FamousQuoteService> {     \r\n        public random() {\r\n          return {\r\n            author: 'Charles Schwab',\r\n            message: 'Be hearty in your approbation and lavish in your praise.'\r\n          }\r\n        }\r\n    }\r\n\r\n    return {\r\n        moduleMetadata: {\r\n            providers: [{ provide: FamousQuoteService, useClass: MockFamousQuoteService }]\r\n        },\r\n        component: LandingBannerComponent\r\n    }\r\n}"
                }
            ],
            "src/app/home/full-player/full-player.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/full-player/full-player.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/full-player/full-player.stories.ts",
                    "type": "Story<any>",
                    "defaultValue": "args => {\r\n    class MockMusicService implements Partial<MusicService> {\r\n        get$(id: string) {\r\n            return of({} as any)\r\n        }\r\n    }\r\n\r\n    return {\r\n        moduleMetadata: {\r\n            providers: [{ provide: MusicService, useClass: MockMusicService }]\r\n        },\r\n        component: FullPlayerComponent\r\n    }\r\n}"
                }
            ],
            "src/app/home/feed/feed.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/feed/feed.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/feed/feed.stories.ts",
                    "type": "Story<any>",
                    "defaultValue": "args => {\r\n    class MockSocialService implements Partial<SocialService> {\r\n        readonly getArchivedPosts$ = new Subject<{ year: string | number, month: string | number }>();\r\n        private archivedPosts$ = this.getArchivedPosts$.pipe(\r\n          switchMap(res => of([]))\r\n        );\r\n      \r\n        readonly getPosts$ = new BehaviorSubject<Filter>(Filter.ALL);\r\n        private readonly allPosts$ = this.getPosts$.pipe(\r\n          switchMap(res => of([]))\r\n        );\r\n      \r\n        readonly posts$: Observable<Post[]> = merge(\r\n          this.allPosts$,\r\n          this.archivedPosts$\r\n        );\r\n      \r\n        readonly archive$: Observable<Array<{ year: number, months: number[] }>> = of([])\r\n    }\r\n\r\n    return {\r\n        moduleMetadata: {\r\n            providers: [{ provide: SocialService, useClass: MockSocialService }]\r\n        },\r\n        component: FeedComponent\r\n    }\r\n}"
                }
            ],
            "src/app/home/feed-history/feed-history.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/feed-history/feed-history.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/feed-history/feed-history.stories.ts",
                    "type": "Story<any>",
                    "defaultValue": "args => {\r\n    class MockSocialService implements Partial<SocialService> {\r\n        readonly getArchivedPosts$ = new Subject<{ year: string | number, month: string | number }>();\r\n        archivedPosts$ = this.getArchivedPosts$.pipe(\r\n          switchMap(res => of([]))\r\n        );\r\n    }\r\n\r\n    return {\r\n        moduleMetadata: {\r\n            providers: [{ provide: SocialService, useClass: MockSocialService }]\r\n        },\r\n        component: FeedHistoryComponent\r\n    }\r\n}"
                }
            ],
            "src/app/home/showcase/showcase.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/showcase/showcase.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "showcase$",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/showcase/showcase.stories.ts",
                    "type": "",
                    "defaultValue": "new Subject<Song[]>()"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/showcase/showcase.stories.ts",
                    "type": "Story<>",
                    "defaultValue": "args => {\r\n    const data = {\r\n        ...args,\r\n        coverImage$: of(args.coverImage),\r\n        audio$: of(args.audio),\r\n    }\r\n\r\n    showcase$.next(Array.from({ length: args.count }).map(() => data));\r\n    // class MockMusicService implements Partial<MusicService> {\r\n    //     readonly showcase$: Observable<Song[]> = merge(\r\n    //         of(Array.from({ length: args.count }).map(() => data)), \r\n    //         showcase$\r\n    //     );\r\n    // }\r\n    class MockStaticFileService implements Partial<StaticFileService> {\r\n        get(fileName: string) {\r\n            return of('assets/images/banner-1.jpg');\r\n        }\r\n    }\r\n\r\n    return {\r\n        // moduleMetadata: {\r\n        //     providers: [{ provide: MusicService, useClass: MockMusicService }]\r\n        // },\r\n        moduleMetadata: {\r\n            providers: [{ provide: StaticFileService, useClass: MockStaticFileService }]\r\n        },\r\n        component: ShowcaseComponent,\r\n        props: {\r\n            animate$: of(null)\r\n        }\r\n    }\r\n}"
                }
            ],
            "src/app/home/email-me/email-me.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/email-me/email-me.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "model",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/email-me/email-me.stories.ts",
                    "type": "any",
                    "defaultValue": "{}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/email-me/email-me.stories.ts",
                    "type": "Story<Email>",
                    "defaultValue": "args => {\r\n    Object.assign(model, args);\r\n    class MockEmailService implements Partial<EmailService> {\r\n        readonly model: Email = model;\r\n\r\n        submit() {\r\n\r\n        }\r\n\r\n        reset() {\r\n\r\n        }\r\n    }\r\n\r\n    return {\r\n        moduleMetadata: {\r\n            providers: [{ provide: EmailService, useClass: MockEmailService }]\r\n        },\r\n        component: EmailMeComponent\r\n    }\r\n}"
                }
            ],
            "src/app/home/biography/biography.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/biography/biography.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n    component: BiographyComponent,\r\n})"
                }
            ],
            "src/app/shared/footer/footer.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/footer/footer.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n    component: FooterComponent,\r\n})"
                }
            ],
            "src/app/shared/header/header.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/header/header.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n    component: HeaderComponent,\r\n})"
                },
                {
                    "name": "MenuClosed",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/header/header.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n    component: HeaderComponent,\r\n    props: {\r\n        isActive: false\r\n    },\r\n})"
                }
            ],
            "src/app/home/album-cover/album-cover.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/album-cover/album-cover.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Hover",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/album-cover/album-cover.stories.ts",
                    "type": "Story<Album>",
                    "defaultValue": "args => ({\r\n    component: AlbumCoverComponent,\r\n    props: {\r\n        ...args,\r\n        isHover: true,\r\n        // selectId: action('selectId')\r\n    }\r\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/album-cover/album-cover.stories.ts",
                    "type": "Story<Album>",
                    "defaultValue": "args => {\r\n    return {\r\n        component: AlbumCoverComponent,\r\n        props: args\r\n    }\r\n}"
                }
            ],
            "src/app/shared/scrollable-labels/scrollable-labels.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/scrollable-labels/scrollable-labels.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\r\n    component: ScrollableLabelsComponent,\r\n    template: `\r\n        <app-scrollable-labels>\r\n            <div class=\"label\">Scrollable Label #1</div>\r\n            <div class=\"label\">Scrollable Label #2</div>\r\n            <div class=\"label\">Scrollable Label #3</div>\r\n            <div class=\"label\">Scrollable Label #4</div>\r\n            <div class=\"label\">Scrollable Label #5</div>\r\n            <div class=\"label\">Scrollable Label #6</div>\r\n            <div class=\"label\">Scrollable Label #7</div>\r\n            <div class=\"label\">Scrollable Label #8</div>\r\n            <div class=\"label\">Scrollable Label #9</div>\r\n            <div class=\"label\">Scrollable Label #10</div>\r\n        </app-scrollable-labels>\r\n        <style>\r\n            .label {\r\n                color: red;\r\n                margin: 0 12px;\r\n            }\r\n        </style>\r\n    `\r\n})"
                }
            ],
            "src/environments/environment.china.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.china.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n  backend: 'http://kazepatriciochan.kfntech.cn/api'\r\n}"
                }
            ],
            "src/environments/environment.intl.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.intl.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n  backend: 'http://kazepatriciochan.com/api'\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  backend: 'http://localhost:5000',\r\n  // media: 'http://localhost:3000'\r\n  media: 'http://125.49.75.2:30531/patriciopersonal_staging'\r\n}"
                }
            ],
            "src/app/core/mock-data.interceptor.ts": [
                {
                    "name": "MockDataProvider",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/mock-data.interceptor.ts",
                    "type": "object",
                    "defaultValue": "{\r\n    // use fake backend in place of Http service for backend-less development\r\n    provide: HTTP_INTERCEPTORS,\r\n    useClass: MockDataInterceptor,\r\n    multi: true\r\n}"
                }
            ],
            "src/app/core/mock-model.interceptor.ts": [
                {
                    "name": "MockModelProvider",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/mock-model.interceptor.ts",
                    "type": "object",
                    "defaultValue": "{\r\n    // use fake backend in place of Http service for backend-less development\r\n    provide: HTTP_INTERCEPTORS,\r\n    useClass: MockModelInterceptor,\r\n    multi: true\r\n}"
                },
                {
                    "name": "openapi",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/mock-model.interceptor.ts",
                    "type": "",
                    "defaultValue": "require('/../openapi.json')"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/mock-model.interceptor.ts",
                    "type": "any"
                }
            ],
            "src/app/home/press-down.animation.ts": [
                {
                    "name": "pressDownAnimation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/press-down.animation.ts",
                    "type": "",
                    "defaultValue": "animation([\r\n    animate('600ms ease-in', keyframes([\r\n        style({ opacity: 0 }),\r\n        style({ opacity: 1, transform: 'scale(1.03)' }),\r\n        style({ transform: 'scale(1)' })\r\n    ]))\r\n])"
                }
            ],
            "src/app/home/slide-in.animation.ts": [
                {
                    "name": "slideInAnimation",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/home/slide-in.animation.ts",
                    "type": "",
                    "defaultValue": "animation([\r\n    animate('600ms ease-out', keyframes([\r\n        style({ opacity: 0, transform: 'translateX(-24px)' }),\r\n        style({ opacity: 1, transform: 'translateX(0)' })\r\n    ]))\r\n])"
                }
            ]
        },
        "groupedFunctions": {
            "server.ts": [
                {
                    "name": "app",
                    "file": "server.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "express.Express"
                },
                {
                    "name": "run",
                    "file": "server.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "void"
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/home/media.service.ts": [
                {
                    "name": "Filter",
                    "childs": [
                        {
                            "name": "ALL",
                            "value": ""
                        },
                        {
                            "name": "PHOTOS",
                            "value": "/Image"
                        },
                        {
                            "name": "VIDEOS",
                            "value": "/Video"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/home/media.service.ts"
                }
            ],
            "src/app/home/social.service.ts": [
                {
                    "name": "Filter",
                    "childs": [
                        {
                            "name": "ALL",
                            "value": ""
                        },
                        {
                            "name": "EVENTS",
                            "value": "/Event"
                        },
                        {
                            "name": "POSTS",
                            "value": "/Update"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/home/social.service.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "app",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "run",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "__non_webpack_require__",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mainModule",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moduleFilename",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mock-data.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "MockDataInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mock-data.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockDataProvider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mock-model.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "MockModelInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mock-model.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MockModelProvider",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mock-model.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "openapi",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/mock-model.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/static-file.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StaticFileService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/home/album-cover/album-cover.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AlbumCoverComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/home/album-cover/album-cover.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/album-cover/album-cover.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Hover",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/album-cover/album-cover.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/biography/biography.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BiographyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/home/biography/biography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/cue.animation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "cueAnimation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/discography/discography.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DiscographyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/home/email-me/email-me.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EmailMeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/home/email-me/email-me.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/email-me/email-me.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "model",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/email-me/email-me.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/famous-quote.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FamousQuoteService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/home/feed-history/feed-history.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FeedHistoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/home/feed-history/feed-history.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/feed-history/feed-history.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/feed/feed.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FeedComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/home/feed/feed.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/feed/feed.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/full-player/full-player.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FullPlayerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/home/full-player/full-player.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/full-player/full-player.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/home/image-viewer/image-viewer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImageViewerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/home/landing-banner/landing-banner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LandingBannerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/home/landing-banner/landing-banner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/landing-banner/landing-banner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/legal/legal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LegalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/home/media.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MediaService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/home/media/media.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MediaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/home/music-gallery-songs/music-gallery-songs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MusicGallerySongsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/home/music-gallery/music-gallery.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MusicGalleryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/home/music-gallery/music-gallery.stories.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MockMusicService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/home/music-gallery/music-gallery.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/music-gallery/music-gallery.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/music.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MusicService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/home/music/music.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MusicComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/home/post/post.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PostComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/home/post/post.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/post/post.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/press-down.animation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pressDownAnimation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/profile.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProfileService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/home/quick-feed/quick-feed.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QuickFeedComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/home/quick-feed/quick-feed.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/quick-feed/quick-feed.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/quick-player/quick-player.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QuickPlayerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/home/quick-player/quick-player.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/quick-player/quick-player.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Hover",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/quick-player/quick-player.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/showcase/showcase.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShowcaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/home/showcase/showcase.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/showcase/showcase.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "showcase$",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/showcase/showcase.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/slide-in.animation.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "slideInAnimation",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/social.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SocialService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/home/updates/updates.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UpdatesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/email.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "EmailService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/footer/footer.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/group.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "GroupPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/header/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/header/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MenuClosed",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/limit.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "LimitPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/navigation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NavigationService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/notice/notice.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NoticeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/popup.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PopupService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/scrollable-labels/scrollable-labels.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ScrollableLabelsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/scrollable-labels/scrollable-labels.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.china.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.intl.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}