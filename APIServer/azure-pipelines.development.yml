# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
pr: none

stages:
- stage: Test
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - task: Docker@2
        inputs:
          command: 'build'
          Dockerfile: '$(System.DefaultWorkingDirectory)/APIServer/Dockerfile'
          addPipelineData: false
      - script: |
          export unittestslayerid=$(docker images --filter "label=unittestlayer=true" -q)
          docker create --name unittestcontainer $unittestslayerid
          docker cp unittestcontainer:/out/testresults ./testresults
          docker stop unittestcontainer
          docker rm unittestcontainer
        displayName: Run unit tests
        continueOnError: false
      - task: PublishTestResults@2
        inputs:
          testRunner: VSTest
          testResultsFiles: '**/loggedresults.xml'
          searchFolder: '$(System.DefaultWorkingDirectory)/testresults'
          publishRunAttachments: true
          failTaskOnFailedTests: true
      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: 'cobertura'
          summaryFileLocation: '$(System.DefaultWorkingDirectory)/testresults/coverage/coverage.cobertura.xml'
          reportDirectory: '$(System.DefaultWorkingDirectory)/testresults/coverage/reports'
- stage: Build
  jobs:
  - job:
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@2
      inputs:
        containerRegistry: 'Aliyun Registry'
        repository: 'destinesiastudio/patriciopersonal-apiserver'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: 'dev'